{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Migrating to Jakarta EE 10","text":"<p>Jakarta EE 10 was released finally on September 2022, it is a big update since Eclipse Foundation hands over the development work from Oracle.</p> <p>Let's have a look at what's new in Jakarta EE 10.</p>"},{"location":"#whats-new-in-jakarta-ee-10","title":"What's New In Jakarta EE 10","text":"<p>Jakarta EE 9/9.1 cleans up the new Jakarta namespace in the API source codes, and Jakarta EE 10 updates a collection of specifications to align with the new Java runtime requirement. Jakarta EE 10 APIs requires Java 11 as the minimal and also supports Java 17 at runtime.</p> <p>CDI is the kernel of Jakarta EE ecosystem, Faces, REST, Concurrency etc. add more alignments to the new CDI.</p> <p>Faces finally removes its own dependency injection solution, and use CDI instead. And JSP(Jakarta Pages) is not a view option of Faces.</p> <p>The long-awaited Multipart mediatype support is available in the new REST spec.</p> <p>Security 3.0 introduces OpenIDConnect protocol support.</p> <p>Concurrency adds a new annotation <code>@Asynchronous</code> to replace the existing one in the EJB specification.</p> <p>CDI itself introduces a new functionality - CDI Lite, which provides build time compatible extensions.</p> <p>There is no updates in EJB and SOAP Web Services related specifications. If you are starting a new project, you should avoid to use these specifications. They will be deprecated and removed from Jakarta EE finally.</p> <p>To align with MicroProfile and satisfy the increasing requirements of Microservices architecture, Jakarta EE 10 introduces a new profile: Core Profile, which includes the following specifications.</p> <ul> <li>RESTful Web Services 3.1</li> <li>JSON Processing 2.1</li> <li>JSON Binding 3.0</li> <li>Annotations 2.1</li> <li>Interceptors 2.1</li> <li>Dependency Injection 2.0</li> <li>CDI Lite 4.0</li> </ul> <p>Unfortunately, Cache, NoSQL and MVC are mature, but still miss the Jakarta EE 10 release train.</p>"},{"location":"#the-future-of-jakarta-ee","title":"The Future of Jakarta EE","text":"<p>Now Jakarta EE is a community-leaded specification, everybody can join and participate into the progress of the definition of the specifications.</p> <p>There are a few proposals are submitted, for example.</p> <ul> <li>Jakarta RPC  - standardizes the gRPC in Jakarta EE ecosystem.</li> <li>Jakarta Data - introduces a general-purpose <code>Repository</code> pattern for SQL database and NoSQL database.</li> <li>...</li> </ul> <p>More info about Jakarta EE, please go to the official Jakarta EE homepage.</p>"},{"location":"faces/","title":"Jakarta Faces","text":"<p>Jakarta Faces, formerly Jakarta Server Faces and JavaServer Faces (JSF) is a Java specification for building component-based user interfaces for web applications, including UI components, state management, event handing, input validation, page navigation, and support for internationalization and accessibility.</p>"},{"location":"faces/cleanup/","title":"Cleaning up Deprecated Stuff","text":""},{"location":"faces/cleanup/#namespace-and-naming-changes","title":"Namespace and Naming Changes","text":"<p>In Jakarta EE 8.0, we have accomplished the changes of the maven artifactId from <code>javaee</code> to <code>jakarta</code>.</p> <p>In Jakarta EE 9.0, the main work is applying new jakarta namespace in the code level. Almost all packages use <code>jakarta</code> instead of <code>javax</code> in Java source codes, and XML namespace use <code>jakarta.ee</code> to replace <code>jcp.org</code> in the XML schema definition. But there is an exception, Faces 3.0 still use the legacy <code>jcp.org</code> in the Faceslet views.</p> <p>In Faces 4.0, it introduces the shorter URN(Uniform Resource Name)s to replace the original URIs.</p> declaration Jakarta EE 8/9 URIs Jakarta EE 10 URNs xmlns:faces http://xmlns.jcp.org/jsf jakarta.faces xmlns:ui http://xmlns.jcp.org/jsf/facelets jakarta.faces.facelets xmlns:f http://xmlns.jcp.org/jsf/core jakarta.faces.core xmlns:h http://xmlns.jcp.org/jsf/html jakarta.faces.html xmlns:p http://xmlns.jcp.org/jsf/passthrough jakarta.faces.passthrough xmlns:cc http://xmlns.jcp.org/jsf/composite jakarta.faces.composite xmlns:myCompositeComponents http://xmlns.jcp.org/jsf/composite/components jakarta.faces.composite/components xmlns:myComponents http://xmlns.jcp.org/jsf/component jakarta.faces.component xmlns:c http://xmlns.jcp.org/jsp/jstl/core jakarta.tags.core xmlns:fn http://xmlns.jcp.org/jsp/jstl/function jakarta.tags.functions <p>Additionally, all <code>JSF</code> related naming are updated to use <code>Faces</code>, including(a copy from BalusC's blog):</p> <ul> <li><code>jsf.js</code> JavaScript file was renamed to <code>faces.js</code></li> <li><code>window.jsf</code> JavaScript global variable was renamed to <code>window.faces</code></li> <li><code>jsf/ClientSideSecretKey</code> JNDI variable was renamed to <code>faces/ClientSideSecretKey</code></li> <li><code>jsf/FlashSecretKey</code> JNDI variable was renamed to <code>faces/FlashSecretKey</code></li> <li><code>xmlns:jsf</code> default XML namespace prefix for passthrough elements was renamed to <code>xmlns:faces</code></li> <li><code>ResourceHandler.JSF_SCRIPT_LIBRARY_NAME</code> constant was renamed to <code>FACES_SCRIPT_LIBRARY_NAME</code></li> <li><code>ResourceHandler.JSF_SCRIPT_RESOURCE_NAME</code> constant was renamed to <code>FACES_SCRIPT_RESOURCE_NAME</code></li> </ul> <p>The specification name is also updated to Jakarta Faces in Faces 4.0 which was named Jakarta Server Faces in Jakarta EE 8/9, and  Java Server Faces(aka JSF) in Java EE 8 and previous versions.</p> <p>In the post, I used word <code>JSF</code> for the legacy versions before 3.0.</p>"},{"location":"faces/cleanup/#removal-of-jsp-as-view","title":"Removal of JSP as View","text":"<p>JSP is a standalone specification for building Java web applications, it mainly acts as the view role in the traditional MVC frameworks. Nowadays there are still a lot of applications that use it to build web UIs.</p> <p>JSP works as a view technology in the early JSF 1.x. Since JSF 2.0, Facelets becomes the default view engine.</p> <p>In Faces 4.0, JSP is physically removed.</p>"},{"location":"faces/cleanup/#better-cdi-alignment","title":"Better CDI Alignment","text":"<p>Since JSF 2.2, new CDI compatible scopes eg. <code>FlowScope</code> and <code>ViewScope</code> are added, CDI was suggested to replace the JSF built-in injection provider. In Faces 4.0, you have to use CDI specific <code>ApplicationScoped</code>, <code>SessionScoped</code>, <code>RequestScoped</code> annotations to replace the legacy ones in old JSF.</p>"},{"location":"faces/cleanup/#removal-of-methodbinding-and-valuebinding","title":"Removal of MethodBinding and ValueBinding","text":"<p>Faces 4.0 removes the legacy <code>MethodBinding</code> and <code>ValueBinding</code> API which will confuse developers when devloping components, and switch to use Jakarta EL as built-in expressing language engine.</p>"},{"location":"faces/cleanup/#removal-of-deprecated-apis","title":"Removal of Deprecated APIs","text":"<p>Some long-existed deprecated APIs are removed in Faces 4.0, including:</p> <ul> <li><code>PreJsf2ExceptionHandlerFactory</code> class was just completely removed as that never proved to be useful</li> <li>The constant <code>CURRENT_COMPONENT</code> and <code>CURRENT_COMPOSITE_COMPONENT</code> was removed from <code>UIComponent</code> class, use new <code>UIComponent.getCurrentComponent</code> instead</li> <li><code>StateManager</code> was removed.</li> <li><code>ResourceResolver</code> was removed and replaced with <code>ResourceHandler</code></li> </ul>"},{"location":"faces/faces/","title":"New Features and Improvements","text":"<p>Next let's explore the amazing new features introduced in Faces 4.0.</p>"},{"location":"faces/faces/#extensionless-mapping","title":"Extensionless Mapping","text":"<p>In the previous versions, <code>FacesServlet</code> is registered to handle mapping of &lt;conext path&gt;/myFacelets.xhtml, &lt;context path&gt;/faces/myFacelets, &lt;context path&gt;/myFacelets.faces.</p> <p>In Faces 4.0, it allows to map a URI without extension, eg. &lt;conext path&gt;/myFacelets.</p> <p>Create a Jakarta EE web project, add the following configuration in the src/webapp/web.xml file.</p> <pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;jakarta.faces.AUTOMATIC_EXTENSIONLESS_MAPPING&lt;/param-name&gt;\n    &lt;param-value&gt;true&lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre> <p>Add a simple CDI bean to activate Faces.</p> <pre><code>@FacesConfig()\n@ApplicationScoped\npublic class FacesCdiActivator {\n}\n</code></pre> <p>Note, the version attribute in annotation <code>@FacesConfig</code> is deprecated since Faces 4.0.</p> <p>Create a Facelets view src/webapp/hello.xhtml.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"\n      xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:f=\"jakarta.faces.core\"\n      xmlns:jsf=\"jakarta.faces\"\n      xmlns:h=\"jakarta.faces.html\"&gt;\n&lt;f:view&gt;\n    &lt;h:head&gt;\n        &lt;title&gt;Hello, Faces 4.0!&lt;/title&gt;\n    &lt;/h:head&gt;\n    &lt;h:body&gt;\n        &lt;h1&gt;Say Hello to Faces 4.0&lt;/h1&gt;\n        &lt;h:form prependId=\"false\"&gt;\n            &lt;label jsf:for=\"name\" jsf:required=\"true\"&gt;Enter your name:&lt;/label&gt;\n            &lt;input type=\"text\"\n                   jsf:id=\"name\"\n                   jsf:value=\"#{hello.name}\"\n                   jsf:required=\"true\"\n                   jsf:requiredMessage=\"Name is required.\"\n                   placeholder=\"Type your name here...\"\n            /&gt;\n            &lt;h:message for=\"name\"/&gt;\n            &lt;br/&gt;\n            &lt;input type=\"submit\" jsf:id=\"submit\" value=\"Say Hello\"  jsf:action=\"#{hello.createMessage()}\"&gt;\n                &lt;f:ajax execute=\"@form\" render=\"@form\"/&gt;\n            &lt;/input&gt;\n            &lt;br/&gt;\n            &lt;p id=\"message\"&gt;#{hello.message}&lt;/p&gt;\n        &lt;/h:form&gt;\n    &lt;/h:body&gt;\n&lt;/f:view&gt;\n&lt;/html&gt;\n</code></pre> <p>And create a backing bean to process the submission.</p> <pre><code>@Named\n@RequestScoped\npublic class Hello {\n    private String name;\n    private String message;\n\n    public Hello() {\n    }\n\n    public void createMessage() {\n        message = \"Hello, \" + name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n</code></pre> <p>Now execute the following command to run the applicaion on GlassFish.</p> <pre><code>&gt; mvn clean package cargo:run\n...\n[INFO] Building war: D:\\hantsylabs\\jakartaee10-sandbox\\faces\\target\\faces-examples.war\n[INFO]\n[INFO] --- cargo-maven3-plugin:1.10.10:run (default-cli) @ faces-examples ---\n[INFO] [en3.ContainerRunMojo] Resolved container artifact org.codehaus.cargo:cargo-core-container-glassfish:jar:1.10.10 for container glassfish7x\n[INFO] [talledLocalContainer] Parsed GlassFish version = [7.0.10]\n[INFO] [talledLocalContainer] GlassFish 7.0.10 starting...\n[INFO] [talledLocalContainer] Attempting to start cargo-domain.... Please look at the server log for more details.....\n[INFO] [talledLocalContainer] GlassFish 7.0.10 started on port [8080]\n[INFO] Press Ctrl-C to stop the container...\n</code></pre> <p>Open a web browser and navigate to http://localhost:8080/faces-examples/hello.</p> <p>NOTE: Here we do not append any extension on the URL.</p> <p></p> <p>Input anything in the text input field and click the Say Hello button. You will see a greeting message displayed as the above image.</p>"},{"location":"faces/faces/#composing-facelets-view-in-java-codes","title":"Composing Facelets View in Java Codes","text":"<p>In the previous version, Facelets view is a standard XHTML file. Since Faces 4.0, it is possible to compose a Faceslets view in pure Java codes.</p> <p>The following is an example of writing Facelets view in Java.</p> <pre><code>@View(\"/hello-facelet.xhtml\")\n@ApplicationScoped\npublic class HelloFacelet extends Facelet {\n    private static final Logger LOGGER = Logger.getLogger(HelloFacelet.class.getName());\n\n    @Override\n    public void apply(FacesContext facesContext, UIComponent root) throws IOException {\n        if (!facesContext.getAttributes().containsKey(IS_BUILDING_INITIAL_STATE)) {\n            return;\n        }\n\n        ComponentBuilder components = new ComponentBuilder(facesContext);\n        List&lt;UIComponent&gt; rootChildren = root.getChildren();\n\n        UIOutput output = new UIOutput();\n        output.setValue(\"&lt;html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"&gt;\");\n        rootChildren.add(output);\n\n        HtmlBody body = components.create(HtmlBody.COMPONENT_TYPE);\n        rootChildren.add(body);\n\n        var title = new UIOutput();\n        title.setValue(\"&lt;h1&gt;Facelets View written in Java&lt;/h1&gt;\");\n        body.getChildren().add(title);\n\n        HtmlForm form = components.create(HtmlForm.COMPONENT_TYPE);\n        form.setId(\"form\");\n        form.setPrependId(false);\n        body.getChildren().add(form);\n\n        HtmlOutputText message = components.create(HtmlOutputText.COMPONENT_TYPE);\n        message.setId(\"message\");\n        //form.getChildren().add(message); // add to the bottom of form\n\n        HtmlOutputLabel label = components.create(HtmlOutputLabel.COMPONENT_TYPE);\n        label.setValue(\"Enter your name\");\n        form.getChildren().add(label);\n\n        HtmlInputText name = components.create(HtmlInputText.COMPONENT_TYPE);\n        name.setId(\"name\");\n        form.getChildren().add(name);\n\n        HtmlCommandButton actionButton = components.create(HtmlCommandButton.COMPONENT_TYPE);\n        actionButton.setId(\"button\");\n        actionButton.addActionListener(e -&gt; {\n                    LOGGER.log(Level.INFO, \"local value: {0}\", name.getLocalValue());\n                    LOGGER.log(Level.INFO, \"name value: {0}\", name.getValue());\n                    LOGGER.log(Level.INFO, \"submitted value: {0}\", name.getSubmittedValue());\n                    var hello = \"Hello,\" + name.getValue();\n                    message.setValue(hello);\n                }\n        );\n        actionButton.setValue(\"Say Hello\");\n        form.getChildren().add(actionButton);\n\n        var br = new UIOutput();\n        br.setValue(\"&lt;br/&gt;\");\n        form.getChildren().add(br);\n        form.getChildren().add(message);\n\n        output = new UIOutput();\n        output.setValue(\"&lt;/html&gt;\");\n        rootChildren.add(output);\n    }\n\n    private static class ComponentBuilder {\n        FacesContext facesContext;\n\n        ComponentBuilder(FacesContext facesContext) {\n            this.facesContext = facesContext;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        &lt;T&gt; T create(String componentType) {\n            return (T) facesContext.getApplication().createComponent(facesContext, componentType, null);\n        }\n    }\n}\n</code></pre> <p>As you see, <code>HelloFacelet</code> view class is consist of the following facilities.</p> <ul> <li>Annotate with a <code>@View</code> annotation to specify the view id</li> <li>Extends <code>Facelet</code> and implements optional methods, one for setup Faces metadata, one for assembling the view content.</li> <li>Add a <code>@ApplicationScoped</code> to declare it as CDI bean, thus means you can inject any CDI beans as you want in this class.</li> </ul> <p>In the above <code>HelloFacelet</code>, in the submit button event listener, it reads the value from input component <code>name</code>, and set the greeting message to the value of <code>message</code> component directly.</p> <p>Now build and run the application.</p> <pre><code>mvn clean package cargo:run\n...\n[INFO] --- cargo:1.10.10:run (default-cli) @ faces-examples ---\n...\n[INFO] [talledLocalContainer] GlassFish 7.0.10 started on port [8080]\n[INFO] Press Ctrl-C to stop the container...\n</code></pre> <p>Now open a browser and navigate to http://localhost:8080/faces-examples/hello-facelet.xhtml.</p> <p></p> <p>Input your name in the input box, and you will see the screen similar to the above image.</p> <p>Alternatively, like regular XHTML Facelet view, we can use expression language to bind the input value and method in this Facelet view to a backend bean.</p> <pre><code>package com.example;\n\nimport jakarta.el.ELContext;\nimport jakarta.el.ExpressionFactory;\nimport jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.faces.annotation.View;\nimport jakarta.faces.component.UIComponent;\nimport jakarta.faces.component.UIOutput;\nimport jakarta.faces.component.html.*;\nimport jakarta.faces.context.FacesContext;\nimport jakarta.faces.view.facelets.Facelet;\nimport jakarta.inject.Inject;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.logging.Logger;\n\nimport static jakarta.faces.application.StateManager.IS_BUILDING_INITIAL_STATE;\n\n@View(\"/hello-facelet2.xhtml\")\n@ApplicationScoped\npublic class HelloFacelet2 extends Facelet {\n    private static final Logger LOGGER = Logger.getLogger(HelloFacelet2.class.getName());\n\n    @Inject\n    Hello hello;\n\n    @Override\n    public void apply(FacesContext facesContext, UIComponent root) throws IOException {\n        if (!facesContext.getAttributes().containsKey(IS_BUILDING_INITIAL_STATE)) {\n            return;\n        }\n\n        ELContext elContext = facesContext.getELContext();\n        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();\n\n        ComponentBuilder components = new ComponentBuilder(facesContext);\n        List&lt;UIComponent&gt; rootChildren = root.getChildren();\n\n        UIOutput output = new UIOutput();\n        output.setValue(\"&lt;html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"&gt;\");\n        rootChildren.add(output);\n\n        HtmlBody body = components.create(HtmlBody.COMPONENT_TYPE);\n        rootChildren.add(body);\n\n        var title = new UIOutput();\n        title.setValue(\"&lt;h1&gt;Facelets View written in Java(using EL value/method binding)&lt;/h1&gt;\");\n        body.getChildren().add(title);\n\n        HtmlForm form = components.create(HtmlForm.COMPONENT_TYPE);\n        form.setId(\"form\");\n        form.setPrependId(false);\n        body.getChildren().add(form);\n\n        HtmlOutputText message = components.create(HtmlOutputText.COMPONENT_TYPE);\n        message.setId(\"message\");\n        message.setValueExpression(\"value\", expressionFactory.createValueExpression(elContext, \"#{hello.message}\", String.class));\n        //form.getChildren().add(message);\n\n        HtmlInputText name = components.create(HtmlInputText.COMPONENT_TYPE);\n        name.setId(\"name\");\n        name.setValueExpression(\"value\", expressionFactory.createValueExpression(elContext, \"#{hello.name}\", String.class));\n        form.getChildren().add(name);\n\n        HtmlCommandButton actionButton = components.create(HtmlCommandButton.COMPONENT_TYPE);\n        actionButton.setId(\"button\");\n        actionButton.setActionExpression(expressionFactory.createMethodExpression(elContext, \"#{hello.createMessage()}\", Void.class, null));\n        actionButton.setValue(\"Say Hello\");\n        form.getChildren().add(actionButton);\n\n        var br = new UIOutput();\n        br.setValue(\"&lt;br/&gt;\");\n        form.getChildren().add(br);\n        form.getChildren().add(message);\n\n        output = new UIOutput();\n        output.setValue(\"&lt;/html&gt;\");\n        rootChildren.add(output);\n    }\n\n    private static class ComponentBuilder {\n        FacesContext facesContext;\n\n        ComponentBuilder(FacesContext facesContext) {\n            this.facesContext = facesContext;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        &lt;T&gt; T create(String componentType) {\n            return (T) facesContext.getApplication().createComponent(facesContext, componentType, null);\n        }\n    }\n}\n</code></pre> <p>Here, we bind the input component value to a value expression <code>Hello.name</code>, and bind submit event listener to a method expression <code>hello.createMessage</code>. </p> <p>Rerun the application, navigate to http://localhost:8080/faces-examples/hello-facelet2.xhtml in your browser.</p> <p>Input your name, you will see the screen similar to the following.</p> <p></p> <p>I try to access the Java Facelet view via the URL without an extension, it does not work, see Mojarra issue #5362.</p>"},{"location":"faces/faces/#new-scope-clientwindowscoped","title":"New Scope: ClientWindowScoped","text":"<p>Faces 4.0 introduce a new CDI compatiable scope, a bean annotated with <code>@ClientWindowScoped</code> will be persist since the browser window/tab is open and will be destroyed till the window/tab is closed.</p> <p>Add the <code>jakarta.faces.CLIENT_WINDOW_MODE</code> to enable <code>ClientWindowScoped</code> support. The value <code>url</code> means it will append a query param <code>jfwid</code> to identify the current window.</p> <pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;jakarta.faces.CLIENT_WINDOW_MODE&lt;/param-name&gt;\n    &lt;param-value&gt;url&lt;/param-value&gt;\n&lt;/context-param&gt;\n</code></pre> <p>You can configure <code>jakarta.faces.NUMBER_OF_CLIENT_WINDOWS</code> to specify the maximum windows number that is allowed to create in a client.</p> <pre><code>&lt;context-param&gt;\n    &lt;param-name&gt;jakarta.faces.NUMBER_OF_CLIENT_WINDOWS&lt;/param-name&gt;\n    &lt;param-value&gt;50&lt;/param-value&gt; &lt;!-- default is 10 --&gt;\n&lt;/context-param&gt;\n</code></pre> <p>Let's create an example to experience.</p> <pre><code>@Named\n@ClientWindowScoped\npublic class Chat implements Serializable {\n\n    private static final Logger LOGGER = Logger.getLogger(Chat.class.getName());\n    private List&lt;String&gt; messages;\n\n    private String newMessage;\n\n    public void send() {\n        if(this.messages == null) {\n            this.messages = new ArrayList&lt;&gt;();\n        }\n\n        var hello = newMessage +\" at \"+ LocalDateTime.now();\n        this.messages.add(hello);\n\n        LOGGER.log(Level.INFO, \"current message list: {0}\", this.messages);\n        this.newMessage = null;\n    }\n\n    public List&lt;String&gt; getMessages() {\n        return messages;\n    }\n\n    public void setMessages(List&lt;String&gt; messages) {\n        this.messages = messages;\n    }\n\n    public String getNewMessage() {\n        return newMessage;\n    }\n\n    public void setNewMessage(String newMessage) {\n        this.newMessage = newMessage;\n    }\n}\n</code></pre> <p>In the above codes, * The <code>@Named</code> allows the bean is accessed by name <code>chat</code> in the Facelet view. * It is annotated with <code>@ClientWindowScoped</code>, and implements <code>Serializable</code> interface.</p> <p>Let's have a look at the view /chat.xhtml.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"\n      xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:f=\"jakarta.faces.core\"\n      xmlns:ui=\"jakarta.faces.facelets\"\n      xmlns:jsf=\"jakarta.faces\"\n      xmlns:h=\"jakarta.faces.html\"&gt;\n&lt;f:view&gt;\n    &lt;h:head&gt;\n        &lt;title&gt;Chat Box &lt;/title&gt;\n    &lt;/h:head&gt;\n    &lt;h:body&gt;\n        &lt;h1&gt;Faces 4.0: Chat Box&lt;/h1&gt;\n        &lt;h:form prependId=\"false\"&gt;\n            &lt;label jsf:for=\"newMessage\" jsf:required=\"true\"&gt;Enter your message:&lt;/label&gt;\n            &lt;input type=\"text\"\n                   jsf:id=\"newMessage\"\n                   jsf:value=\"#{chat.newMessage}\"\n                   jsf:required=\"true\"\n                   jsf:requiredMessage=\"New message is required.\"\n                   placeholder=\"Type your message here...\"\n                   autofocus=\"true\"\n            /&gt;\n            &lt;h:message for=\"newMessage\"/&gt;\n            &lt;br/&gt;\n            &lt;input type=\"submit\" jsf:id=\"submit\" value=\"Send NOW\" jsf:action=\"#{chat.send()}\"&gt;\n&lt;!--                &lt;f:ajax execute=\"@form\" render=\"@form\"/&gt;--&gt;\n            &lt;/input&gt;\n            &lt;br/&gt;\n            &lt;p id=\"message\"&gt;\n                &lt;ul&gt;\n                    &lt;ui:repeat value=\"#{chat.messages}\" var=\"m\"&gt;\n                       &lt;li&gt;\n                           #{m}\n                       &lt;/li&gt;\n                    &lt;/ui:repeat&gt;\n                &lt;/ul&gt;\n            &lt;/p&gt;\n        &lt;/h:form&gt;\n    &lt;/h:body&gt;\n&lt;/f:view&gt;\n&lt;/html&gt;\n</code></pre> <p>Build and run the application.</p> <pre><code>mvn clean package cargo:run\n</code></pre> <p>Open a browser and navigate to http://localhost:8080/faces-examples/chat, you will the following screen.</p> <p></p> <p>Try to type something in the input box and hit send button, the new message will be appended to in the existing message list.</p> <p>Open a new tab in the browser and try to access http://localhost:8080/faces-examples/chat again, you will there is a new window for the chat conversation, there is no existing messages, and input some message, you will find a new <code>jfwid</code> in the URL is used for this new window.</p> <p>When I enabled ajax on the submit button in the view, there is no jfwid param appended to the URL in the browser window, see Mojarra issue 5366</p> <p>And for those Facelet views written in Java codes, all URL are appended a jfwid param, see Mojarra issue 5365</p>"},{"location":"faces/faces/#input-file-component-improvement","title":"Input File Component Improvement","text":"<p>The new input file component add two new attributes, <code>accept</code> and <code>multiple</code>. * The <code>accept</code> can limit the upload file types. * The <code>multiple=\"true\"</code> allows you to upload multiple files at the same time.</p> <p>Let's create an example to experience.</p> <p>Firstly let's have a look at the Facelet view file - inputFiles.xhtml.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"\n      xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:f=\"jakarta.faces.core\"\n      xmlns:jsf=\"jakarta.faces\"\n      xmlns:h=\"jakarta.faces.html\"&gt;\n&lt;f:view&gt;\n    &lt;h:head&gt;\n        &lt;title&gt;New attribute `accept` and `multiple` in inputFile tag!&lt;/title&gt;\n    &lt;/h:head&gt;\n    &lt;h:body&gt;\n        &lt;h1&gt;New attribute `accept` and `multiple` in inputFile tag!&lt;/h1&gt;\n        &lt;h:form prependId=\"false\" enctype=\"multipart/form-data\"&gt;\n            &lt;label jsf:for=\"files\"&gt;Upload files:&lt;/label&gt;\n            &lt;h:inputFile\n                    multiple=\"true\"\n                    accept=\"image/png,image/jpeg,image/gif\"\n                    id=\"files\"\n                    value=\"#{inputFiles.files}\"\n                    required=\"true\"\n                    requiredMessage=\"Files is required.\"\n                    placeholder=\"Choose files from Disk...\"\n            /&gt;\n            &lt;h:message for=\"files\"/&gt;\n            &lt;br/&gt;\n            &lt;input type=\"submit\" jsf:id=\"submit\" value=\"Upload Now\" jsf:action=\"#{inputFiles.submit()}\"&gt;\n            &lt;/input&gt;\n            &lt;br/&gt;\n            &lt;p&gt;#{inputFiles.uploadedFiles}&lt;/p&gt;\n            &lt;h:message globalOnly=\"true\" showSummary=\"true\"&gt;&lt;/h:message&gt;\n        &lt;/h:form&gt;\n    &lt;/h:body&gt;\n&lt;/f:view&gt;\n&lt;/html&gt;\n</code></pre> <p>The backend bean - InputFiles.java.</p> <pre><code>\n@Named\n@RequestScoped\npublic class InputFiles {\n    private static final Logger LOGGER = Logger.getLogger(InputFiles.class.getSimpleName());\n\n    @Inject\n    FacesContext facesContext;\n\n    private List&lt;Part&gt; files;\n\n    private List&lt;String&gt; uploadedFiles = new ArrayList&lt;&gt;();\n\n    public List&lt;Part&gt; getFiles() {\n        return files;\n    }\n\n    public void setFiles(List&lt;Part&gt; files) {\n        this.files = files;\n    }\n\n    public List&lt;String&gt; getUploadedFiles() {\n        return uploadedFiles;\n    }\n\n    public void submit() {\n        LOGGER.log(Level.INFO, \"uploaded file size:{0}\", files.size());\n        for (Part part : files) {\n            String submittedFilename = part.getSubmittedFileName();\n            String name = Paths.get(part.getSubmittedFileName()).getFileName().toString();\n            long size = part.getSize();\n            String contentType = part.getContentType();\n            LOGGER.log(Level.INFO, \"uploaded file: submitted filename: {0}, name:{1}, size:{2}, content type: {3}\", new Object[]{\n                    submittedFilename, name, size, contentType\n            });\n\n            part.getHeaderNames()\n                    .forEach(headerName -&gt;\n                            LOGGER.log(Level.INFO, \"header name: {0}, value: {1}\", new Object[]{\n                                    headerName, part.getHeader(headerName)\n                            })\n                    );\n\n            uploadedFiles.add(submittedFilename);\n            facesContext.addMessage(null, new FacesMessage(name + \" was uploaded successfully!\"));\n        }\n    }\n\n}\n</code></pre> <p>Build and run the application.</p> <pre><code>mvn clean package cargo:run\n</code></pre> <p>Open a browser and navigate to http://localhost:8080/faces-examples/inputFiles.</p> <p></p> <p>Click the button Choose Files, it will open the system file chooser, which has already filtered the files by type that set in the <code>accept</code> attribute.</p> <p>Choose some files, and press the Upload Now button. You wil see the following messages in the screen.</p> <p></p> <p>Get the example project from https://github.com/hantsy/jakartaee10-sandbox/tree/master/faces and explore it yourself.</p>"},{"location":"faces/new/","title":"What's new in Faces 4.0","text":"<p>Jakarta Faces 4.0 includes a lot of small improvements and better alignment with CDI and other specifications.</p> <p>BalusC's What's new in Faces 4.0 provides a comprehensive guide for those want to get know the detailed changes since Faces 3.0.</p>"},{"location":"jpa/","title":"Jakarta Persistence 3.1","text":"<p>Jakarta Persistence (aka JPA) is a standard of persistence and O/R mapping in Java environments. It includes a collection of simple and stupid APIs to execute literal query (aka JPQL), and also contains alternative Criteria APIs to build the query clause in type-safe Java codes.</p> <p>Next we will explore the new features introduced in Jakarta Persistence 3.1(JPA 3.1).</p>"},{"location":"jpa/hibernate/","title":"Example: Hibernate 6.1","text":"<p>In this section, we will demonstrate the new features in a simple Java SE application with Hibernate.</p>"},{"location":"jpa/hibernate/#creating-a-simple-java-project","title":"Creating a Simple Java Project","text":"<p>There are a lot of approaches to prepare a simple Java project skeleton. The simplest is using your favorite IDE to generate one for you.</p> <p>Alternatively, you can create it using Maven Quickstart archetype.</p> <p>Open a terminal, execute the following command.</p> <pre><code>mvn archetype:generate\n    -DarchetypeGroupId=org.apache.maven.archetypes\n    -DarchetypeArtifactId=maven-archetype-quickstart\n    -DarchetypeVersion=1.4\n</code></pre> <p>The interactive mode will guide you setup the project info, such as groupId, artifact, version etc.</p> <p>In this example project, we use <code>com.example</code> as groupId, and <code>demo</code> as artifactId. Then confirm and begin to generate the project source codes.</p> <p>After it is done, open the project in a Java IDE such as IntelliJ IDEA(Community Edition is free), or Eclipse Java/Java EE bundle, or NetBeans IDE, or a simple text editor, eg. VS Code.</p> <p>Open the project pom.xml, add Hibernate 6.1, and JUnit etc. into project dependencies, and setup Maven compiler plugin to use the latest LTS Java 17 to compile the source codes.</p> <p>The final pom.xml looks like the following.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;org.example&lt;/groupId&gt;\n    &lt;artifactId&gt;hibernate6&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;com.example&lt;/groupId&gt;\n        &lt;artifactId&gt;jakartaee10-sandbox-parent&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;relativePath&gt;..&lt;/relativePath&gt;\n    &lt;/parent&gt;\n\n    &lt;name&gt;hibernate6&lt;/name&gt;\n    &lt;description&gt;Jakarta EE 10 Sandbox: Hibernate 6/JPA 3.1 example&lt;/description&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.release&gt;17&lt;/maven.compiler.release&gt;\n\n        &lt;!-- requires 6.1.2.Final or higher --&gt;\n        &lt;hibernate.version&gt;6.1.4.Final&lt;/hibernate.version&gt;\n        &lt;h2.version&gt;2.1.214&lt;/h2.version&gt;\n\n        &lt;!-- test deps --&gt;\n        &lt;junit-jupiter.version&gt;5.9.1&lt;/junit-jupiter.version&gt;\n        &lt;assertj-core.version&gt;3.23.1&lt;/assertj-core.version&gt;\n\n        &lt;slf4j.version&gt;2.0.3&lt;/slf4j.version&gt;\n        &lt;logback.version&gt;1.4.4&lt;/logback.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate.orm&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;\n            &lt;version&gt;${hibernate.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;jakarta.persistence&lt;/groupId&gt;\n            &lt;artifactId&gt;jakarta.persistence-api&lt;/artifactId&gt;\n            &lt;version&gt;3.1.0&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- H2 Database --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.h2database&lt;/groupId&gt;\n            &lt;artifactId&gt;h2&lt;/artifactId&gt;\n            &lt;version&gt;${h2.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- logging with logback --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n            &lt;version&gt;${slf4j.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n            &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;\n            &lt;version&gt;${slf4j.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n            &lt;artifactId&gt;logback-core&lt;/artifactId&gt;\n            &lt;version&gt;${logback.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;\n            &lt;version&gt;${logback.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!-- test dependencies --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n            &lt;version&gt;${junit-jupiter.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.assertj&lt;/groupId&gt;\n            &lt;artifactId&gt;assertj-core&lt;/artifactId&gt;\n            &lt;version&gt;${assertj-core.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.hibernate.orm&lt;/groupId&gt;\n            &lt;artifactId&gt;hibernate-testing&lt;/artifactId&gt;\n            &lt;version&gt;${hibernate.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;junit&lt;/groupId&gt;\n                    &lt;artifactId&gt;junit&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.10.1&lt;/version&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.0.0-M7&lt;/version&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre> <p>NOTE: To share common resources for all feature-based projects, create a parent POM to centralize the common configurations in one place, check the parent pom.xml file.</p> <p>In this example project, we use H2 embedded database for test purpose. Hibernate 6.1 implements the features of Jakarta Persistence 3.1, but it includes a Jakarta Persistence 3.0 API in the transitive dependency tree.</p> <p>To use Jakarta Persistence 3.1 API, we have to add <code>jakarta.persistence:jakarta.persistence-api</code> 3.1 explicitly.</p> <p>In the src/main/resources/META-INF, add a new file named persistence.xml to activate JPA.</p> <pre><code>&lt;persistence xmlns=\"https://jakarta.ee/xml/ns/persistence\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_1.xsd\"\n             version=\"3.1\"&gt;\n\n    &lt;persistence-unit name=\"defaultPU\" transaction-type=\"RESOURCE_LOCAL\"&gt;\n\n        &lt;description&gt;Hibernate test case template Persistence Unit&lt;/description&gt;\n        &lt;provider&gt;org.hibernate.jpa.HibernatePersistenceProvider&lt;/provider&gt;\n\n        &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;\n\n        &lt;properties&gt;\n            &lt;property name=\"hibernate.archive.autodetection\" value=\"class, hbm\"/&gt;\n\n            &lt;property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.H2Dialect\"/&gt;\n            &lt;property name=\"hibernate.connection.driver_class\" value=\"org.h2.Driver\"/&gt;\n            &lt;property name=\"hibernate.connection.url\" value=\"jdbc:h2:mem:db1;DB_CLOSE_DELAY=-1\"/&gt;\n            &lt;property name=\"hibernate.connection.username\" value=\"sa\"/&gt;\n\n            &lt;property name=\"hibernate.connection.pool_size\" value=\"5\"/&gt;\n\n            &lt;property name=\"hibernate.show_sql\" value=\"true\"/&gt;\n            &lt;property name=\"hibernate.format_sql\" value=\"true\"/&gt;\n            &lt;property name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\"/&gt;\n\n            &lt;property name=\"hibernate.max_fetch_depth\" value=\"5\"/&gt;\n\n            &lt;property name=\"hibernate.cache.region_prefix\" value=\"hibernate.test\"/&gt;\n            &lt;property name=\"hibernate.cache.region.factory_class\"\n                      value=\"org.hibernate.testing.cache.CachingRegionFactory\"/&gt;\n\n            &lt;!--NOTE: hibernate.jdbc.batch_versioned_data should be set to false when testing with Oracle--&gt;\n            &lt;property name=\"hibernate.jdbc.batch_versioned_data\" value=\"true\"/&gt;\n\n            &lt;property name=\"jakarta.persistence.validation.mode\" value=\"NONE\"/&gt;\n            &lt;property name=\"hibernate.service.allow_crawling\" value=\"false\"/&gt;\n            &lt;property name=\"hibernate.session.events.log\" value=\"true\"/&gt;\n        &lt;/properties&gt;\n\n    &lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre> <p>We use logback as the logging framework in this project. In the src/main/resources, add a logback.xml to configure logback.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;configuration&gt;\n\n    &lt;property name=\"LOGS\" value=\"./logs\"/&gt;\n\n    &lt;appender name=\"Console\"\n              class=\"ch.qos.logback.core.ConsoleAppender\"&gt;\n        &lt;layout class=\"ch.qos.logback.classic.PatternLayout\"&gt;\n            &lt;Pattern&gt;\n                %green(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable\n            &lt;/Pattern&gt;\n        &lt;/layout&gt;\n    &lt;/appender&gt;\n\n    &lt;appender name=\"RollingFile\"\n              class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;\n        &lt;file&gt;${LOGS}/app.log&lt;/file&gt;\n        &lt;encoder\n                class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"&gt;\n            &lt;Pattern&gt;%d %p %C{1.} [%t] %m%n&lt;/Pattern&gt;\n        &lt;/encoder&gt;\n\n        &lt;rollingPolicy\n                class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;\n            &lt;!-- rollover daily and when the file reaches 10 MegaBytes --&gt;\n            &lt;fileNamePattern&gt;${LOGS}/archived/app-%d{yyyy-MM-dd}.%i.log\n            &lt;/fileNamePattern&gt;\n            &lt;timeBasedFileNamingAndTriggeringPolicy\n                    class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;\n                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;\n            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;\n        &lt;/rollingPolicy&gt;\n    &lt;/appender&gt;\n\n    &lt;!-- LOG everything at INFO level --&gt;\n    &lt;root level=\"info\"&gt;\n        &lt;appender-ref ref=\"RollingFile\"/&gt;\n        &lt;appender-ref ref=\"Console\"/&gt;\n    &lt;/root&gt;\n\n    &lt;!-- Debug hibernate SQL,  see: https://thorben-janssen.com/hibernate-logging-guide/ --&gt;\n    &lt;logger name=\"org.hibernate.SQL\" level=\"DEBUG\"/&gt;\n    &lt;logger name=\"org.hibernate.type.descriptor.sql\" level=\"trace\"/&gt;\n\n    &lt;!-- Custom debug level for the application code --&gt;\n    &lt;logger name=\"com.example\" level=\"debug\" additivity=\"false\"&gt;\n        &lt;appender-ref ref=\"RollingFile\"/&gt;\n        &lt;appender-ref ref=\"Console\"/&gt;\n    &lt;/logger&gt;\n&lt;/configuration&gt;\n</code></pre> <p>We set <code>org.hibernate.SQL</code> logging level to <code>DEBUG</code> and <code>org.hibernate.type.descriptor.sql</code> to <code>trace</code>, it will help you to dig into the Hibernate generated SQL at runtime.</p>"},{"location":"jpa/hibernate/#uuid-basic-type","title":"UUID Basic Type","text":"<p>Create a simple <code>Entity</code>.</p> <pre><code>@Entity\npublic class Person {\n    @Id\n    @Column(name = \"id\", nullable = false)\n    @GeneratedValue(strategy = GenerationType.UUID)\n    private UUID id;\n    private String name;\n    private int age = 30;\n\n    public Person() {\n    }\n\n    public Person(String name, int age) {\n        assert age &gt; 0;\n        this.name = name;\n        this.age = age;\n        this.birthDate = LocalDateTime.now().minusYears(this.age);\n    }\n\n    // getters and setters\n    // override equals and hashCode\n}\n</code></pre> <p>An entity class is annotated with an <code>@Entity</code>, optionally you can specify the entity name and add table definition with an extra <code>@Table</code> annotation.</p> <p>Here we defined a UUID type ID, and use the new UUID generation strategy introduced in JPA 3.1.</p> <p>JPA requires an Entity should includes a no-arguments constructor, if you declare another constructor with a few arguments, you should declare this no-arguments constructor explicitly.</p> <p>Create a simple JUnit test to verify if the UUID type working as expected.</p> <pre><code>class PersonUUIDTest {\n    private static final Logger log = LoggerFactory.getLogger(PersonUUIDTest.class);\n\n    private EntityManagerFactory entityManagerFactory;\n\n    @BeforeEach\n    void setUp() {\n        entityManagerFactory = Persistence.createEntityManagerFactory(\"defaultPU\");\n        var entityManager = entityManagerFactory.createEntityManager();\n        entityManager.getTransaction().begin();\n        var deleteFromPerson = entityManager.createQuery(\"DELETE FROM Person\").executeUpdate();\n        log.debug(\"Deleted {} persons\", deleteFromPerson);\n        entityManager.getTransaction().commit();\n        entityManager.close();\n    }\n\n    @Test\n    @DisplayName(\"insert person and verify person\")\n    public void testInsertAndFindPerson() throws Exception {\n        var person = new Person(\"John\", 30);\n        var entityManager = entityManagerFactory.createEntityManager();\n        entityManager.getTransaction().begin();\n        entityManager.persist(person);\n        entityManager.getTransaction().commit();\n        var id = person.getId();\n        assertNotNull(id);\n\n        try {\n            var foundPerson = entityManager.find(Person.class, id);\n            assertThat(foundPerson.getId()).isNotNull();\n            assertThat(foundPerson.getName()).isEqualTo(\"John\");\n            assertThat(foundPerson.getAge()).isEqualTo(30);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    @AfterEach\n    void tearDown() {\n        entityManagerFactory.close();\n    }\n}\n</code></pre> <p>In the <code>@BeforeEach</code> method, we will create an <code>EntityManagerFactory</code> instance. And in the <code>@AfterEach</code> we call the <code>EntityManagerFactory.close</code> to release the resource.</p> <p>In the <code>@BeforeEach</code> we try to clean up the Person data.</p> <p>Now in the <code>testInsertAndFindPerson</code> test, we insert a new person, then utilize <code>entityManager.find</code> to find the inserted person.</p> <p>The person id is annotated with <code>@ID</code> and <code>@GeneratedValue</code>, when inserting a person into table, hibernate will generate an ID automatically. After it is persisted, the returned instance is filled with the generated id, it should not be a null.</p>"},{"location":"jpa/hibernate/#numeric-functions","title":"Numeric Functions","text":"<p>Add some extra properties in the above <code>Person</code> class.</p> <pre><code>public class Person{\n    private Integer yearsWorked = 2;\n    private LocalDateTime birthDate = LocalDateTime.now().minusYears(30);\n    private BigDecimal salary = new BigDecimal(\"12345.678\");\n    private BigDecimal hourlyRate = new BigDecimal(\"34.56\");\n\n    // setters and getters\n}\n</code></pre> <p>Create a new test to verify the new numeric functions: <code>ceiling</code>, <code>floor</code>, <code>round</code>, <code>exp</code>, <code>ln</code>, <code>power</code>, <code>sign</code>.</p> <pre><code>@Test\n@DisplayName(\"&gt;&gt;&gt; test numeric functions\")\npublic void testNumericFunctions() throws Exception {\n    var person = new Person(\"John\", 30);\n    var entityManager = entityManagerFactory.createEntityManager();\n    entityManager.getTransaction().begin();\n    entityManager.persist(person);\n    entityManager.getTransaction().commit();\n    var id = person.getId();\n    assertNotNull(id);\n\n    try {\n        var queryString = \"\"\"\n                SELECT p.name as name,\n                CEILING(p.salary) as ceiling,\n                FLOOR(p.salary) as floor,\n                ROUND(p.salary, 1) as round,\n                EXP(p.yearsWorked) as exp,\n                LN(p.yearsWorked) as ln,\n                POWER(p.yearsWorked,2) as power,\n                SIGN(p.yearsWorked) as sign\n                FROM Person p\n                WHERE p.id=:id\n                \"\"\";\n        var query = entityManager.createQuery(queryString);\n        query.setParameter(\"id\", id);\n        var resultList = query.getResultList();\n        log.debug(\"Result list: {}\", resultList);\n        resultList.forEach(result -&gt; log.debug(\"result: {}\", result));\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n}\n</code></pre> <p>Next, let's have a look at how to use them in the Criteria APIs.</p> <pre><code>@Test\n@DisplayName(\"&gt;&gt;&gt; test numeric functions\")\npublic void testNumericFunctions() throws Exception {\n    var person = new Person(\"John\", 30);\n    var entityManager = entityManagerFactory.createEntityManager();\n    entityManager.getTransaction().begin();\n    entityManager.persist(person);\n    entityManager.getTransaction().commit();\n    var id = person.getId();\n    assertNotNull(id);\n\n    try {\n        // see: https://hibernate.zulipchat.com/#narrow/stream/132096-hibernate-user/topic/New.20functions.20in.20JPA.203.2E1/near/289429903\n        var cb = (HibernateCriteriaBuilder) entityManager.getCriteriaBuilder();\n        var query = cb.createTupleQuery();\n        var root = query.from(Person.class);\n\n        query.multiselect(root.get(\"name\"),\n                cb.ceiling(root.get(\"salary\")),\n                cb.floor(root.get(\"salary\")),\n                cb.round(root.get(\"salary\"), 1),\n                cb.exp(root.get(\"yearsWorked\")),\n                cb.ln(root.get(\"yearsWorked\")),\n                // see: https://hibernate.atlassian.net/browse/HHH-15395\n                cb.power(root.get(\"yearsWorked\"), 2),\n                cb.sign(root.get(\"yearsWorked\"))\n        );\n        query.where(cb.equal(root.get(\"id\"), id));\n        var resultList = entityManager.createQuery(query).getResultList();\n        log.debug(\"Result list: {}\", resultList);\n\n        resultList.forEach(result -&gt;\n                log.debug(\n                        \"result: ({},{},{},{},{},{},{},{})\",\n                        result.get(0, String.class),\n                        result.get(1, BigDecimal.class),\n                        result.get(2, BigDecimal.class),\n                        result.get(3, BigDecimal.class),\n                        result.get(4, Double.class),\n                        result.get(5, Double.class),\n                        result.get(6, Double.class),\n                        result.get(7, Integer.class)\n                )\n        );\n    } catch (Exception ex) {\n        fail(ex);\n    }\n}\n</code></pre> <p>Note, when using Hibernate 6.1, we have to cast <code>CriteriaBuilder</code> to <code>HibernateCriteriaBuilder</code> to experience the new numeric functions. Hibernate 6.2 will align to JPA 3.1 and fix the issue.</p>"},{"location":"jpa/hibernate/#datetime-functions","title":"DateTime Functions","text":"<p>Add <code>LOCAL TIME</code>, <code>LOCAL DATETIME</code>, <code>LOCAL DATE</code> to the select clause, create a test to verify the query result.</p> <pre><code> @Test\n@DisplayName(\"&gt;&gt;&gt; test datetime functions\")\npublic void testDateTimeFunctions() throws Exception {\n    var person = new Person(\"John\", 30);\n    var entityManager = entityManagerFactory.createEntityManager();\n    entityManager.getTransaction().begin();\n    entityManager.persist(person);\n    entityManager.getTransaction().commit();\n    var id = person.getId();\n    assertNotNull(id);\n\n    try {\n        var queryString = \"\"\"\n                SELECT p.name as name,\n                LOCAL TIME as localTime,\n                LOCAL DATETIME as localDateTime,\n                LOCAL DATE as localDate\n                FROM Person p\n                \"\"\";\n\n        var query = entityManager.createQuery(queryString);\n        var resultList = query.getResultList();\n        log.debug(\"Result list: {}\", resultList);\n        resultList.forEach(result -&gt; log.debug(\"result: {}\", result));\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n}\n</code></pre> <p>Run the test, you will see <code>LOCAL TIME</code>, <code>LOCAL DATETIME</code>, <code>LOCAL DATE</code> results are treated as Java 8 <code>LocalTime</code>, <code>LocalDateTime</code>, <code>LocalDate</code> directly.</p> <p>Let's have a look at the usage in the CriteriaBuilder APIs.</p> <pre><code>@Test\n@DisplayName(\"&gt;&gt;&gt; test datetime functions\")\npublic void testDateTimeFunctions() throws Exception {\n    var person = new Person(\"John\", 30);\n    var entityManager = entityManagerFactory.createEntityManager();\n    entityManager.getTransaction().begin();\n    entityManager.persist(person);\n    entityManager.getTransaction().commit();\n    var id = person.getId();\n    assertNotNull(id);\n\n    try {\n        var cb = (HibernateCriteriaBuilder) entityManager.getCriteriaBuilder();\n        var query = cb.createTupleQuery();\n        var root = query.from(Person.class);\n\n        query.multiselect(root.get(\"name\"),\n                cb.localTime(),\n                cb.localDateTime(),\n                cb.localDate()\n        );\n        query.where(cb.equal(root.get(\"id\"), id));\n\n        var resultList = entityManager.createQuery(query).getResultList();\n        log.debug(\"Result list: {}\", resultList);\n        resultList.forEach(result -&gt;\n                log.debug(\n                        \"result: ({},{},{},{})\",\n                        result.get(0, String.class),\n                        result.get(1, LocalTime.class),\n                        result.get(2, LocalDateTime.class),\n                        result.get(3, LocalDate.class)\n                )\n        );\n    } catch (Exception ex) {\n        fail(ex);\n    }\n}\n</code></pre>"},{"location":"jpa/hibernate/#extract-function","title":"<code>EXTRACT</code> function","text":"<p>Here we use the new <code>extract</code> function to read the <code>year</code>, <code>quarter</code>, <code>month</code>, <code>week</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code> values from a Java 8 DateTime type property in JPQL query.</p> <pre><code>@Test\n@DisplayName(\"&gt;&gt;&gt; test `EXTRACT` functions\")\npublic void testExtractFunctions() throws Exception {\n    var person = new Person(\"John\", 30);\n    var entityManager = entityManagerFactory.createEntityManager();\n    entityManager.getTransaction().begin();\n    entityManager.persist(person);\n    entityManager.getTransaction().commit();\n    var id = person.getId();\n    assertNotNull(id);\n\n    try {\n        var queryString = \"\"\"\n                SELECT p.name as name,\n                EXTRACT(YEAR FROM p.birthDate) as year,\n                EXTRACT(QUARTER FROM p.birthDate) as quarter,\n                EXTRACT(MONTH FROM p.birthDate) as month,\n                EXTRACT(WEEK FROM p.birthDate) as week,\n                EXTRACT(DAY FROM p.birthDate) as day,\n                EXTRACT(HOUR FROM p.birthDate) as hour,\n                EXTRACT(MINUTE FROM p.birthDate) as minute,\n                EXTRACT(SECOND FROM p.birthDate) as second\n                FROM Person p\n                \"\"\";\n        var query = entityManager.createQuery(queryString);\n\n        var resultList = query.getResultList();\n        log.debug(\"Result list: {}\", resultList);\n        resultList.forEach(result -&gt; log.debug(\"result: {}\", result));\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n}\n</code></pre> <p>Note, there is no mapped extract function in the CriteriaBuilder APIs, for more details, check the issue jpa-api #356.</p> <p>Get a copy of sample codes from my Github and experience yourself.</p>"},{"location":"jpa/jakartaee/","title":"Jakarta EE Runtime Environment","text":"<p>Next let's go to the Jakarta EE 10 compatible products to experience the new features of JPA 3.1.</p> <p>Firstly we will prepare a Jakarta EE 10 web project.</p>"},{"location":"jpa/jakartaee/#creating-a-jakarta-ee-web-project","title":"Creating a Jakarta EE Web Project","text":"<p>Simply generate a web project skeleton via Maven Webapp Archetype.</p> <pre><code>mvn archetype:generate\n    -DarchetypeGroupId=org.apache.maven.archetypes\n    -DarchetypeArtifactId=maven-archetype-webapp\n    -DarchetypeVersion=1.4\n</code></pre> <p>Then add Jakarta EE 10 dependency into the project pom.xml. Let's have a look at the modified pom.xml.</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;groupId&gt;com.example&lt;/groupId&gt;\n    &lt;artifactId&gt;jpa-examples&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;war&lt;/packaging&gt;\n    &lt;parent&gt;\n        &lt;groupId&gt;com.example&lt;/groupId&gt;\n        &lt;artifactId&gt;jakartaee10-sandbox-parent&lt;/artifactId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n        &lt;relativePath&gt;..&lt;/relativePath&gt;\n    &lt;/parent&gt;\n\n    &lt;name&gt;jpa-examples&lt;/name&gt;\n    &lt;description&gt;Jakarta EE 10 Sandbox: Persistence 3.1 Examples&lt;/description&gt;\n    &lt;properties&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;jakarta.platform&lt;/groupId&gt;\n            &lt;artifactId&gt;jakarta.jakartaee-api&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.eclipse.persistence&lt;/groupId&gt;\n            &lt;artifactId&gt;org.eclipse.persistence.jpa.modelgen.processor&lt;/artifactId&gt;\n            &lt;version&gt;4.0.0&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jboss.arquillian.junit5&lt;/groupId&gt;\n            &lt;artifactId&gt;arquillian-junit5-container&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!-- see: https://github.com/arquillian/arquillian-core/issues/248 --&gt;\n        &lt;!-- and https://github.com/arquillian/arquillian-core/pull/246/files --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jboss.arquillian.protocol&lt;/groupId&gt;\n            &lt;artifactId&gt;arquillian-protocol-servlet-jakarta&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre> <p>In the above pom.xml, we also add JUnit 5 and Arquillian related dependencies in test scope. Through the Jakarta EE container specific Aquillian adapter, we can run the tests in a Jakarta EE containers.</p> <p>In this project, we reuse the the <code>Person</code> entity we have introduced in the Hibernate section.</p> <p>Now let's move to persistence configuration. Create a persistence.xml in the src/main/resources/META-INFO folder.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;persistence version=\"3.0\" xmlns=\"https://jakarta.ee/xml/ns/persistence\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"https://jakarta.ee/xml/ns/persistence https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd\"&gt;\n    &lt;persistence-unit name=\"defaultPU\" transaction-type=\"JTA\"&gt;\n        &lt;jta-data-source&gt;java:comp/DefaultDataSource&lt;/jta-data-source&gt;\n        &lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;\n        &lt;properties&gt;\n            &lt;property name=\"jakarta.persistence.schema-generation.database.action\" value=\"drop-and-create\"/&gt;\n\n            &lt;!-- for  Glassfish/Payara/EclipseLink --&gt;\n            &lt;property name=\"eclipselink.logging.level.sql\" value=\"FINE\"/&gt;\n            &lt;property name=\"eclipselink.logging.level\" value=\"FINE\"/&gt;\n            &lt;property name=\"eclipselink.logging.parameters\" value=\"true\"/&gt;\n\n            &lt;!-- for WildFly/Hibernate --&gt;\n            &lt;property name=\"hibernate.show_sql\" value=\"true\"/&gt;\n            &lt;property name=\"hibernate.format_sql\" value=\"true\"/&gt;\n        &lt;/properties&gt;\n    &lt;/persistence-unit&gt;\n&lt;/persistence&gt;\n</code></pre> <p>The configuration is a little different from the one we introduced in the Hibernate section.</p> <ul> <li>In a container environment, we would like choose <code>JTA</code> as transaction-type.</li> <li>We do not setup database connection info, instead we configure a built-in DataSource. The <code>java:comp/DefaultDataSource</code> is the default DataSource for all Jakarta EE compatible products.</li> </ul>"},{"location":"jpa/jakartaee/#creating-jaxrs-resource","title":"Creating Jaxrs Resource","text":"<p>To interact with our backend database, we will create a simple complete JAXRS application, including:</p> <ul> <li>A EJB <code>@Stateless</code> bean to read data from database</li> <li>And expose data via a simple JAXRS resource</li> </ul> <p>OK, let's create class <code>PersonRepository</code> which is annotated with <code>@Stateless</code>. In this class, inject a <code>EntityManager</code> bean with an annotation <code>@PersistenceContext</code>, and add a new method <code>getAllResource</code> to execute a JPQL query to retrieve all persons.</p> <pre><code>@Stateless\npublic class PersonRepository {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\n    public List&lt;Person&gt; getAllPersons() {\n        return entityManager.createQuery(\"select p from Person p\", Person.class)\n                .getResultList();\n    }\n}\n</code></pre> <p>Next, create a <code>PersonResource</code> to expose persons to client.</p> <pre><code>@RequestScoped\n@Path(\"/persons\")\npublic class PersonResource {\n\n    @Inject\n    PersonRepository personRepository;\n\n    @Path(\"\")\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response allPersons() {\n        var data = personRepository.getAllPersons();\n        return Response.ok(data).build();\n    }\n}\n</code></pre> <p>The <code>PersonResource</code> is annotated with <code>RequestScoped</code>, it is a CDI bean, the <code>@Path</code> on the class define the root path of all subresources in this class. The <code>allPersons</code> will produces all persons to client in JSON format when HTTP Client request matches HTTP GET method, and URI is <code>/persons</code> and HTTP Header Accept is compatible with <code>application/json</code>.</p> <p>To activate JAXRS feature, create a class to extend the JAXRS <code>Application</code>, add <code>@ApplicationPath</code> to specify the root context path of all JAXRS resources.</p> <pre><code>@ApplicationPath(\"/rest\")\npublic class RestActivator extends Application {\n}\n</code></pre> <p>Let's create a bean to add some sample data at the application startup.</p> <pre><code>@Startup\n@Singleton\npublic class DataInitializer {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\n    @PostConstruct\n    public void init() {\n        List\n                .of(\n                        new Person(\"Jack\", 20),\n                        new Person(\"Rose\", 18)\n                )\n                .forEach(entityManager::persist);\n    }\n}\n</code></pre>"},{"location":"jpa/jakartaee/#deploying-to-jakarta-ee-containers","title":"Deploying to Jakarta EE Containers","text":"<p>Build and package the application into a war archive. Open a terminal, switch to the project root folder, and execute the following command.</p> <pre><code>mvn clean package -DskipTests -D\"maven.test.skip=true\"\n</code></pre> <p>When it is done, there is war package is ready in the path target/jpa-examples.war.</p>"},{"location":"jpa/jakartaee/#glassfish-70","title":"GlassFish 7.0","text":"<ol> <li>Download the latest GlassFish 7.0, extract files to a location, eg. D:\\glassfish7, mark as GlassFish_install.</li> <li>To start GlassFish and Derby, open a terminal, enter GlassFish_install/bin, run <code>asadmin start-database</code> and <code>asadmin start-domain domain1</code>.</li> <li>Copy the above war package to Glassfish_install/glassfish/domains/domain1/autodeploy folder.</li> <li>Open GlassFish_install/glassfish/domains/domain1/logs/server.log, and wait the deployment is completed.</li> <li> <p>Open another terminal window, execute <code>curl http://localhost:8080/jpa-examples/rest/persons</code>. You will see the following result in the console.</p> <p><code>json [{\"age\":18,\"birthDate\":\"2004-11-06T14:54:05.4504678\",\"gender\":\"MALE\",\"hourlyRate\":34.56,\"id\":\"d8552d71-ff7f-4650-b5a0-ce1c5fb3fe0b\",\"name\":\"Rose\",\"salary\":12345.678,\"yearsWorked\":2},{\"age\":20,\"birthDate\":\"2002-11-06T14:54:05.4504678\",\"gender\":\"MALE\",\"hourlyRate\":34.56,\"id\":\"cdf94cdc-21b3-492c-b1b5-06bc8cae9947\",\"name\":\"Jack\",\"salary\":12345.678,\"yearsWorked\":2}]</code></p> </li> <li> <p>To stop GlassFish and Derby, run <code>asadmin stop-database</code> and <code>asadmin stop-domain domain1</code> respectively.</p> </li> </ol>"},{"location":"jpa/jakartaee/#wildfly-preview-27","title":"WildFly Preview 27","text":"<ol> <li>Download the latest WildFly Preview, extract files to a location, eg. D:\\wildfly-preview-27.0.0.Beta1, mark as WildFly_install.</li> <li>Open a terminal, enter WildFly_install/bin, run <code>standalone</code> to start WildFly with the default standalone profile configuration.</li> <li>Copy the built war to WildFly_install/standalone/deployments.</li> <li>Wait the deployment progress is done, you can use the curl in GlassFish section to verify the application.</li> <li>Send a <code>CTLR+C</code> keys combination in the original WildFly startup console to stop WildFly.</li> </ol>"},{"location":"jpa/jakartaee/#deploying-application-via-maven-plugin","title":"Deploying Application via Maven Plugin","text":""},{"location":"jpa/jakartaee/#glassfish-70_1","title":"GlassFish 7.0","text":"<p>The GlassFish project does not include an official Maven plugin to manage GlassFish server. But there is a community-based <code>cargo-maven3-plugin</code> which can be used to manage almost all popular Jakarta EE application servers and web servers.</p> <p>Add the following <code>profile</code> section to use cargo Maven plugin to manage the lifecycle of GlassFish server.</p> <pre><code>&lt;profile&gt;\n    &lt;id&gt;glassfish&lt;/id&gt;\n    &lt;activation&gt;\n        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\n    &lt;/activation&gt;\n    &lt;properties&gt;\n        &lt;cargo.zipUrlInstaller.downloadDir&gt;${project.basedir}/../installs&lt;/cargo.zipUrlInstaller.downloadDir&gt;\n    &lt;/properties&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.codehaus.cargo&lt;/groupId&gt;\n                &lt;artifactId&gt;cargo-maven3-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;container&gt;\n                        &lt;containerId&gt;glassfish7x&lt;/containerId&gt;\n                        &lt;!-- &lt;artifactInstaller&gt;\n                            &lt;groupId&gt;org.glassfish.main.distributions&lt;/groupId&gt;\n                            &lt;artifactId&gt;glassfish&lt;/artifactId&gt;\n                            &lt;version&gt;${glassfish.version}&lt;/version&gt;\n                        &lt;/artifactInstaller&gt; --&gt;\n                        &lt;zipUrlInstaller&gt;\n                            &lt;url&gt;https://github.com/eclipse-ee4j/glassfish/releases/download/${glassfish.version}/glassfish-${glassfish.version}.zip&lt;/url&gt;\n                            &lt;downloadDir&gt;${cargo.zipUrlInstaller.downloadDir}&lt;/downloadDir&gt;\n                        &lt;/zipUrlInstaller&gt;\n                    &lt;/container&gt;\n                    &lt;configuration&gt;\n                        &lt;!-- the configuration used to deploy --&gt;\n                        &lt;home&gt;${project.build.directory}/glassfish7x-home&lt;/home&gt;\n                        &lt;properties&gt;\n                            &lt;cargo.remote.password&gt;&lt;/cargo.remote.password&gt;\n                            &lt;cargo.glassfish.removeDefaultDatasource&gt;true&lt;/cargo.glassfish.removeDefaultDatasource&gt;\n                        &lt;/properties&gt;\n                        &lt;datasources&gt;\n                            &lt;datasource&gt;\n                                &lt;driverClass&gt;org.apache.derby.jdbc.EmbeddedDriver&lt;/driverClass&gt;\n                                &lt;url&gt;jdbc:derby:derbyDB;create=true&lt;/url&gt;\n                                &lt;jndiName&gt;jdbc/__default&lt;/jndiName&gt;\n                                &lt;username&gt;APP&lt;/username&gt;\n                                &lt;password&gt;nonemptypassword&lt;/password&gt;\n                            &lt;/datasource&gt;\n                        &lt;/datasources&gt;\n                    &lt;/configuration&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/profile&gt;\n</code></pre> <p>Unlike the approach in NetBeans IDE or Eclipse IDE with GlassFish Pack, where starting GlassFish it will start the built-in Derby at the same time. Cargo maven plugin does not start the built-in Derby as expected, to use the default DataSource in our project, we have to clear the default DataSource and add a new default DataSource using the embedded Derby which is shipped by GlassFish distributions.</p> <p>Run the following command.</p> <pre><code>mvn clean package cargo:run -DskipTests -Dmaven.test.skip=true\n</code></pre> <p>It will compile the project source codes and package the compiled resources into a war archive, then start the managed GlassFish server(with a new <code>cargo-domain</code>), and then deploy the package into the running server.</p> <p>Note, when you run this command at the first time, it will spend some time to download a copy of the GlassFish distribution, and extract the files into the project build folder.</p> <p>In another terminal window, execute <code>curl http://localhost:8080/jpa-examples/rest/persons</code> to verify the endpoint.</p> <p>To stop the server, just send a <code>CTRL+C</code> in the original GlassFish running console.</p>"},{"location":"jpa/jakartaee/#wildfly-preview-27_1","title":"WildFly Preview 27","text":"<p>The WildFly project itself provides an official WildFly Maven plugin, we will configure it in a new Maven profile.</p> <p>Cargo maven plugin also supports WildFly, check Cargo WildFly support docs.</p> <pre><code>&lt;profile&gt;\n    &lt;id&gt;wildfly&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;!-- Wildfly server --&gt;\n        &lt;wildfly.artifactId&gt;wildfly-preview-dist&lt;/wildfly.artifactId&gt;\n        &lt;jboss-as.home&gt;${project.build.directory}/wildfly-preview-${wildfly.version}&lt;/jboss-as.home&gt;\n    &lt;/properties&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n\n            &lt;!-- unpack a copy of WildFly--&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n                &lt;version&gt;${maven-dependency-plugin.version}&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;unpack&lt;/id&gt;\n                        &lt;phase&gt;process-classes&lt;/phase&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;unpack&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                            &lt;artifactItems&gt;\n                                &lt;artifactItem&gt;\n                                    &lt;groupId&gt;org.wildfly&lt;/groupId&gt;\n                                    &lt;artifactId&gt;${wildfly.artifactId}&lt;/artifactId&gt;\n                                    &lt;version&gt;${wildfly.version}&lt;/version&gt;\n                                    &lt;type&gt;zip&lt;/type&gt;\n                                    &lt;overWrite&gt;false&lt;/overWrite&gt;\n                                    &lt;outputDirectory&gt;${project.build.directory}&lt;/outputDirectory&gt;\n                                &lt;/artifactItem&gt;\n                            &lt;/artifactItems&gt;\n                        &lt;/configuration&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n\n            &lt;!-- The WildFly plugin deploys your war to a local running WildFly container --&gt;\n            &lt;!-- To use, run: mvn package wildfly:deploy --&gt;\n            &lt;!-- For Jakarta EE 9, use `wildfly-preview-dist` as artifactId instead to start and deploy applications--&gt;\n            &lt;!-- Run: mvn clean wildfly:run -PWildfly -Dwildfly.artifactId=wildfly-preview-dist -Dwildfly.version=22.0.0.Alpha1 --&gt;\n            &lt;!-- or set the `jboss-as.home` to run: mvn clean wildfly:run -PWildfly -Djboss-as.home=D:\\appsvr\\wildfly-preview-22.0.0.Alpha1--&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.wildfly.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;wildfly-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;${wildfly-maven-plugin.version}&lt;/version&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n    &lt;repositories&gt;\n        &lt;repository&gt;\n            &lt;id&gt;opensaml&lt;/id&gt;\n            &lt;url&gt;https://build.shibboleth.net/nexus/content/repositories/releases/&lt;/url&gt;\n        &lt;/repository&gt;\n    &lt;/repositories&gt;\n&lt;/profile&gt;\n</code></pre> <p>Utilize this WildFly plugin, we can deploy applications into an embedded WildFly, a managed WildFly server or a remote running WildFly server.</p> <pre><code>mvn clean wildfly:run -Pwildfly -DskipTests -Dmaven.test.skip=true\n</code></pre> <p>By default, if we do not setup a <code>jboss-as.home</code> or remote host connection info, it will bootstrap an embedded WildFly and run the application on the embedded server.</p> <p>Here we configure Maven dependency plugin to download a copy of WildFly, extract the files to the project build directory, and setup a <code>jboss-as.home</code> property, the value is the WildFly location. The WildFly plugin will manage the whole WildFly lifecycle - start the WildFly server, deploy applications into the running server, (use <code>CTRL+C</code> hotkey) stop the server.</p>"},{"location":"jpa/jakartaee/#testing-jpa-components","title":"Testing JPA Components","text":"<p>Here I assume you are familiar with JUnit and Arquillian.</p> <p>For the developers those are new to Arqullian framework, please read the official Arquillian Guides to start your first step. Note, these tutorials are available in several languages, including Simplified Chinese.</p> <p>If you have some basic knowledge of Arquillian, go to my Jakarta EE 8 starter boilerplate project and Jakarta EE 9 starter boilerplate project to update yourself.</p> <p>Since Jakarta EE 9, it begins to use the new <code>jakarta</code> namespace in all specifications. Arquillian 1.7.0.x starts to support these changes.</p>"},{"location":"jpa/jakartaee/#configuring-glassfish-managed-adapter","title":"Configuring GlassFish Managed Adapter","text":"<p>In the next steps, we will configure a managed GlassFish Arquillian Adapter to run the testing codes.</p> <pre><code>&lt;profile&gt;\n    &lt;id&gt;arq-glassfish-managed&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;skip.unit.tests&gt;true&lt;/skip.unit.tests&gt;\n        &lt;skip.integration.tests&gt;false&lt;/skip.integration.tests&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;!-- Jersey --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.glassfish.jersey.media&lt;/groupId&gt;\n            &lt;artifactId&gt;jersey-media-sse&lt;/artifactId&gt;\n            &lt;version&gt;${jersey.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.glassfish.jersey.media&lt;/groupId&gt;\n            &lt;artifactId&gt;jersey-media-json-binding&lt;/artifactId&gt;\n            &lt;version&gt;${jersey.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.glassfish.jersey.inject&lt;/groupId&gt;\n            &lt;artifactId&gt;jersey-hk2&lt;/artifactId&gt;\n            &lt;version&gt;${jersey.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.glassfish.jersey.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jersey-client&lt;/artifactId&gt;\n            &lt;version&gt;${jersey.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.github.hantsy.arquillian-container-glassfish-jakarta&lt;/groupId&gt;\n            &lt;artifactId&gt;arquillian-glassfish-managed-jakarta&lt;/artifactId&gt;\n            &lt;version&gt;${arquillian-glassfish-jakarta.version}&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n    &lt;build&gt;\n        &lt;testResources&gt;\n            &lt;testResource&gt;\n                &lt;directory&gt;src/test/resources&lt;/directory&gt;\n            &lt;/testResource&gt;\n            &lt;testResource&gt;\n                &lt;directory&gt;src/test/arq-glassfish-managed&lt;/directory&gt;\n            &lt;/testResource&gt;\n        &lt;/testResources&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n                &lt;version&gt;${maven-dependency-plugin.version}&lt;/version&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;unpack&lt;/id&gt;\n                        &lt;phase&gt;pre-integration-test&lt;/phase&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;unpack&lt;/goal&gt;\n                        &lt;/goals&gt;\n                        &lt;configuration&gt;\n                            &lt;artifactItems&gt;\n                                &lt;artifactItem&gt;\n                                    &lt;groupId&gt;org.glassfish.main.distributions&lt;/groupId&gt;\n                                    &lt;artifactId&gt;glassfish&lt;/artifactId&gt;\n                                    &lt;version&gt;${glassfish.version}&lt;/version&gt;\n                                    &lt;type&gt;zip&lt;/type&gt;\n                                    &lt;overWrite&gt;false&lt;/overWrite&gt;\n                                    &lt;outputDirectory&gt;${project.build.directory}&lt;/outputDirectory&gt;\n                                &lt;/artifactItem&gt;\n                            &lt;/artifactItems&gt;\n                        &lt;/configuration&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;\n                &lt;version&gt;${maven-failsafe-plugin.version}&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;environmentVariables&gt;\n                        &lt;GLASSFISH_HOME&gt;${project.build.directory}/glassfish7&lt;/GLASSFISH_HOME&gt;\n                    &lt;/environmentVariables&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/profile&gt;\n</code></pre> <p>In the above configuration, we add <code>com.github.hantsy.arquillian-container-glassfish-jakarta:arquillian-glassfish-managed-jakarta</code>, which is my fork of the official Arquillian Container GlassFish project.</p> <p>Then we prepare a copy of the latest GlassFish 7.0 in the <code>pre-integration-test</code> phase. The Arquillian tests will be executed in the <code>integretion-test</code> phase.</p>"},{"location":"jpa/jakartaee/#creating-arquillian-tests","title":"Creating Arquillian Tests","text":"<p>Let's create a simple Arquillian test to verify the UUID basic type feature in JPA 3.1.</p> <pre><code>@ExtendWith(ArquillianExtension.class)\npublic class UUIDStrategyTest {\n\n    private final static Logger LOGGER = Logger.getLogger(UUIDStrategyTest.class.getName());\n\n    @Deployment\n    public static WebArchive createDeployment() {\n        return ShrinkWrap.create(WebArchive.class)\n                .addClasses(Person.class, Gender.class)\n                .addAsResource(\"test-persistence.xml\", \"META-INF/persistence.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n    }\n\n    @PersistenceContext\n    private EntityManager em;\n\n    @Inject\n    UserTransaction ux;\n\n    @BeforeEach\n    public void before() throws Exception {\n        startTx();\n    }\n\n    private void startTx() throws Exception {\n        ux.begin();\n        em.joinTransaction();\n    }\n\n    @AfterEach\n    public void after() throws Exception {\n        endTx();\n    }\n\n    private void endTx() throws Exception {\n        try {\n            if( ux.getStatus() == Status.STATUS_ACTIVE ) {\n                ux.commit();\n            }\n        } catch (Exception e) {\n            ux.rollback();\n        }\n    }\n\n    @Test\n    public void testPersistingPersons() throws Exception {\n        final Person person = new Person();\n        person.setName(\"Hantsy Bai\");\n        em.persist(person);\n        endTx();\n\n        startTx();\n        final Person foundPerson = em.find(Person.class, person.getId());\n        assertNotNull(foundPerson.getId());\n        LOGGER.log(Level.INFO, \"Found person: {0}\", foundPerson);\n    }\n}\n</code></pre> <p>The <code>@ExtendWith(ArquillianExtension.class)</code> annotation on a test class to support Arquillian test lifecycle.</p> <p>The <code>@Deployment</code> annotated static method defines the resources that will be packaged into the test archive and deployed into the manged GlassFish server. It is easy to use shrinkwrap to create a fine-grained deployment unit.</p> <p>You can inject <code>EntityManager</code> and <code>UserTransaction</code> beans in an Arquillian test like what you do in a simple CDI bean.</p> <p>In this test class, we setup <code>@BeforeEach</code> and <code>@AfterEach</code> hooks to start a transaction and end the transaction.</p> <p>The test method <code>testPersistingPersons</code> looks no difference from a plain JUnit test. Firstly we persist a person entity, and commit the transaction to ensure it will be flushed into the database as expected. Then executing a simple JPA query to verify the persisted data.</p> <p>Execute the following command to run the tests.</p> <pre><code>mvn clean verify -Parq-glassfish-managed\n</code></pre> <p>Similarly, create a test to verify the new numeric functions and datetime functions in Jakarta EE containers.</p> <pre><code>@ExtendWith(ArquillianExtension.class)\npublic class JPQLFunctionsTest {\n\n    private final static Logger LOGGER = Logger.getLogger(JPQLFunctionsTest.class.getName());\n\n    @Deployment\n    public static WebArchive createDeployment() {\n        return ShrinkWrap.create(WebArchive.class)\n                .addClasses(Person.class, Gender.class)\n                .addAsResource(\"test-persistence.xml\", \"META-INF/persistence.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n    }\n\n    @PersistenceContext\n    private EntityManager em;\n\n    @Inject\n    UserTransaction ux;\n\n    @BeforeEach\n    public void before() throws Exception {\n        clearPersons();\n        startTx();\n    }\n\n    private void clearPersons() throws Exception {\n        startTx();\n        var builder = em.getCriteriaBuilder();\n        var deletePersonQuery = builder.createCriteriaDelete(Person.class);\n        var deletedPersons = em.createQuery(deletePersonQuery).executeUpdate();\n        LOGGER.log(Level.INFO, \"Deleted {0} persons\", deletedPersons);\n        endTx();\n    }\n\n    private void startTx() throws Exception {\n        ux.begin();\n        em.joinTransaction();\n    }\n\n    @AfterEach\n    public void after() throws Exception {\n        endTx();\n    }\n\n    private void endTx() throws Exception {\n        LOGGER.log(Level.INFO, \"Transaction status: {0}\", ux.getStatus());\n        try {\n            if (ux.getStatus() == Status.STATUS_ACTIVE) {\n                ux.commit();\n            }\n        } catch (Exception e) {\n            ux.rollback();\n        }\n    }\n\n    @Test\n    @DisplayName(\"&gt;&gt;&gt; test numeric functions\")\n    public void testNumericFunctions() throws Exception {\n        var person = new Person(\"John\", 30);\n        em.persist(person);\n        var id = person.getId();\n        assertNotNull(id);\n        endTx();\n\n        startTx();\n        try {\n            var queryString = \"\"\"\n                    SELECT p.name,\n                    CEILING(p.salary),\n                    FLOOR(p.salary),\n                    ROUND(p.salary, 1),\n                    EXP(p.yearsWorked),\n                    LN(p.yearsWorked),\n                    POWER(p.yearsWorked,2),\n                    SIGN(p.yearsWorked)\n                    FROM Person p\n                    WHERE p.id=:id\n                    \"\"\";\n            var query = em.createQuery(queryString);\n\n            query.setParameter(\"id\", id);\n            // for EclipseLinks\n            query.setHint(QueryHints.RESULT_TYPE, ResultType.Map);\n            List&lt;Map&lt;String, Object&gt;&gt; resultList = query.getResultList();\n            LOGGER.log(Level.INFO, \"result size:{0}\", resultList.size());\n            resultList.forEach(data -&gt; {\n                data.forEach((k, v) -&gt; LOGGER.log(Level.INFO, \"field:{0}, value: {1}\", new Object[]{k, v}));\n            });\n        } catch (Exception ex) {\n            fail(ex);\n        }\n    }\n\n    @Test\n    @DisplayName(\"&gt;&gt;&gt; test nen datetime functions\")\n    public void testDateTimeFunctions() throws Exception {\n        var person = new Person(\"John\", 30);\n        em.persist(person);\n        assertNotNull(person.getId());\n        endTx();\n\n        startTx();\n        try {\n            var queryString = \"\"\"\n                    SELECT p.name as name,\n                    LOCAL TIME as localTime,\n                    LOCAL DATETIME as localDateTime,\n                    LOCAL DATE as localDate\n                    FROM Person p\n                    \"\"\";\n            // for EclipseLinks\n            var query = em.createQuery(queryString);\n            // for EclipseLinks\n            query.setHint(QueryHints.RESULT_TYPE, ResultType.Map);\n            List&lt;Map&lt;String, Object&gt;&gt; resultList = query.getResultList();\n            LOGGER.log(Level.INFO, \"result size:{0}\", resultList.size());\n            resultList.forEach(data -&gt; {\n                data.forEach((k, v) -&gt; LOGGER.log(Level.INFO, \"field:{0}, value: {1}\", new Object[]{k, v}));\n            });\n        } catch (Exception ex) {\n            fail(ex);\n        }\n    }\n\n    @Test\n    @DisplayName(\"&gt;&gt;&gt; test `EXTRACT` functions\")\n    public void testExtractFunctions() throws Exception {\n        var person = new Person(\"John\", 30);\n        em.persist(person);\n        assertNotNull(person.getId());\n        endTx();\n\n        startTx();\n        try {\n            var queryString = \"\"\"\n                    SELECT p.name as name,\n                    EXTRACT(YEAR FROM p.birthDate) as year,\n                    EXTRACT(QUARTER FROM p.birthDate) as quarter,\n                    EXTRACT(MONTH FROM p.birthDate) as month,\n                    EXTRACT(WEEK FROM p.birthDate) as week,\n                    EXTRACT(DAY FROM p.birthDate) as day,\n                    EXTRACT(HOUR FROM p.birthDate) as hour,\n                    EXTRACT(MINUTE FROM p.birthDate) as minute,\n                    EXTRACT(SECOND FROM p.birthDate) as second\n                    FROM Person p\n                    \"\"\";\n            var query = em.createQuery(queryString);\n            // for EclipseLinks\n            query.setHint(QueryHints.RESULT_TYPE, ResultType.Map);\n            List&lt;Map&lt;String, Object&gt;&gt; resultList = query.getResultList();\n            LOGGER.log(Level.INFO, \"result size:{0}\", resultList.size());\n            resultList.forEach(data -&gt; {\n                data.forEach((k, v) -&gt; LOGGER.log(Level.INFO, \"field:{0}, value: {1}\", new Object[]{k, v}));\n            });\n        } catch (Exception ex) {\n            fail(ex);\n        }\n    }\n}\n</code></pre> <p>Alternatively, create another test to verify the new functionalities using the Criteria APIs.</p> <pre><code>@ExtendWith(ArquillianExtension.class)\npublic class JPQLCriteriaBuilderTest {\n\n    private final static Logger LOGGER = Logger.getLogger(JPQLCriteriaBuilderTest.class.getName());\n\n    @Deployment\n    public static WebArchive createDeployment() {\n        return ShrinkWrap.create(WebArchive.class)\n                .addClasses(Person.class, Gender.class)\n                .addAsResource(\"test-persistence.xml\", \"META-INF/persistence.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n    }\n\n    @PersistenceContext\n    private EntityManager em;\n\n    @Inject\n    UserTransaction ux;\n\n    @BeforeEach\n    public void before() throws Exception {\n        clearPersons();\n        startTx();\n    }\n\n    private void clearPersons() throws Exception {\n        startTx();\n        var builder = em.getCriteriaBuilder();\n        var deletePersonQuery = builder.createCriteriaDelete(Person.class);\n        var deletedPersons = em.createQuery(deletePersonQuery).executeUpdate();\n        LOGGER.log(Level.INFO, \"Deleted {0} persons\", deletedPersons);\n        endTx();\n    }\n\n    private void startTx() throws Exception {\n        ux.begin();\n        em.joinTransaction();\n    }\n\n    @AfterEach\n    public void after() throws Exception {\n        endTx();\n    }\n\n    private void endTx() throws Exception {\n        LOGGER.log(Level.INFO, \"Transaction status: {0}\", ux.getStatus());\n        try {\n            if (ux.getStatus() == Status.STATUS_ACTIVE) {\n                ux.commit();\n            }\n        } catch (Exception e) {\n            ux.rollback();\n        }\n    }\n\n    @Test\n    @DisplayName(\"&gt;&gt;&gt; test numeric functions\")\n    public void testNumericFunctions() throws Exception {\n        var person = new Person(\"John\", 30);\n        em.persist(person);\n        var id = person.getId();\n        assertNotNull(id);\n        endTx();\n\n        startTx();\n        try {\n            var cb = em.getCriteriaBuilder();\n            var query = cb.createTupleQuery();\n            var root = query.from(Person.class);\n\n            query.multiselect(root.get(\"name\"),\n                    cb.ceiling(root.get(\"salary\")),\n                    cb.floor(root.get(\"salary\")),\n                    cb.round(root.get(\"salary\"), 1),\n                    cb.exp(root.get(\"yearsWorked\")),\n                    cb.ln(root.get(\"yearsWorked\")),\n                    cb.power(root.get(\"yearsWorked\"), 2),\n                    cb.sign(root.get(\"yearsWorked\"))\n            );\n            query.where(cb.equal(root.get(\"id\"), id));\n\n            var resultList = em.createQuery(query).getResultList();\n            LOGGER.log(Level.INFO, \"result size:{0}\", resultList.size());\n            resultList.forEach(result -&gt;\n                    LOGGER.log(\n                            Level.INFO,\n                            // see: https://github.com/eclipse-ee4j/eclipselink/issues/1593\n                            // John,12,345,12,345,12,345,7.389,0.693,4,1\n                            \"tuple data :{0},{1},{2},{3},{4},{5},{6},{7}\",\n                            new Object[]{\n                                    result.get(0, String.class),\n                                    result.get(1, BigDecimal.class), // it should return BigDecimal\n                                    result.get(2, BigDecimal.class),\n                                    result.get(3, BigDecimal.class),\n                                    result.get(4, Double.class),\n                                    result.get(5, Double.class),\n                                    result.get(6, Double.class),\n                                    result.get(7, Integer.class)\n                            }\n                    )\n            );\n        } catch (Exception ex) {\n            fail(ex);\n        }\n    }\n\n    @Test\n    @DisplayName(\"&gt;&gt;&gt; test nen datetime functions\")\n    public void testDateTimeFunctions() throws Exception {\n        var person = new Person(\"John\", 30);\n        em.persist(person);\n        var id = person.getId();\n        assertNotNull(id);\n        endTx();\n\n        startTx();\n        try {\n            var cb = em.getCriteriaBuilder();\n            var query = cb.createTupleQuery();\n            var root = query.from(Person.class);\n\n            query.multiselect(root.get(\"name\"),\n                    cb.localTime(),\n                    cb.localDateTime(),\n                    cb.localDate()\n            );\n            query.where(cb.equal(root.get(\"id\"), id));\n\n            var resultList = em.createQuery(query).getResultList();\n            LOGGER.log(Level.INFO, \"result size:{0}\", resultList.size());\n            resultList.forEach(data -&gt;\n                    LOGGER.log(\n                            Level.INFO,\n                            \"tuple data :{0},{1},{2},{3}\",\n                            new Object[]{\n                                    data.get(0, String.class),\n                                    data.get(1, java.time.LocalTime.class),\n                                    data.get(2, java.time.LocalDateTime.class),\n                                    data.get(3, java.time.LocalDate.class)\n                            }\n                    )\n            );\n        } catch (Exception ex) {\n            fail(ex);\n        }\n    }\n}\n</code></pre> <p>But unfortunately, there is a bug in the GlassFish 7.0.0-M9 will fail the test <code>JPQLFunctionsTest</code>, more details please check Github issues GlassFish #24120.</p> <p>Get a copy of sample codes from my github and experience yourself.</p>"},{"location":"jpa/new/","title":"What's New in Jakarta Persistence 3.1","text":"<p>Compare to JPA 3.0, JPA 3.1 just brings several small enhancements.</p> <p>Here we list some highlights in JPA 3.1</p>"},{"location":"jpa/new/#uuid-basic-type-support","title":"UUID Basic Type Support","text":"<p>Firstly UUID is now treated a basic type. Some JPA providers, such as Hibernate and EclipseLink have supported UUID for a long time, and now it finally becomes part of the standard specification.</p> <p>For the database that has built-in UUID data type, such as PostgreSQL, an UUID field or property is stored as an UUID data type in database directly. For those databases do not support UUID, the JPA provider could provide a solution to map an UUID value to a varchar type or an equivalent data type in the database.</p> <p>UUID is usually used as ID of an entity. In JPA 3.0 or the earlier versions, Hibernate and EclipseLink provides their specific generators for UUID. JPA 3.1 introduces a new standard ID generation strategy for UUID type - <code>UUID</code>.</p> <pre><code>@Id\n@GeneratedValue(strategy = GenerationType.UUID) private UUID id;\n</code></pre>"},{"location":"jpa/new/#extensions-of-jpql-and-criteria-apis","title":"Extensions of JPQL and Criteria APIs","text":"<p>JPA 3.1 ports several functions that existed in SQL to JPQL and Criteria APIs, including:</p> <ul> <li>Numeric functions</li> <li>Java 8 DateTime(JSR310) specific functions</li> <li>A standardized <code>EXTRACT</code> function</li> </ul>"},{"location":"jpa/new/#numeric-functions","title":"Numeric Functions","text":"<p>SQL standards defines a collection of math functions, in JPA 3.1, several functions are standardized as part of JPQL and Criteria APIs.</p> JPQL Function CriteriaBuilder Method Description CEILING(arithmetic_expression) ceiling() Returns the ceiling of its argument: that is, the smallest integer greater than or equal to its argument. EXP(arithmetic_expression) exp() Returns the exponential of its argument: that is, Euler's number e raised to the power of its argument. FLOOR(arithmetic_expression) floor() Returns the floor of its argument: that is, the largest integer greater than or equal to its argument. LN(arithmetic_expression) ln() Returns the natural logarithm of its argument. POWER(arithmetic_expression, arithmetic_expression) power() Returns the first argument raised to the power of its second argument. ROUND(arithmetic_expression, arithmetic_expression) round() Returns the first argument rounded to the number of decimal places given by the second argument. SIGN(arithmetic_expression) sign() Returns the sign of its argument: that is, 1 if its argument is positive, -1 if its argument is negative, or 0 if its argument is zero."},{"location":"jpa/new/#java-8-datetime-functions","title":"Java 8 DateTime Functions","text":"<p>The existing <code>CURRENT_TIME</code>, <code>CURRENT_DATE</code>, <code>CURRENT_TIMPSTAMP</code> functions are mapped the old <code>java.util.Date</code> or <code>java.sql.Date</code>. To align with Java 8 DateTime APIs, new functions <code>LOCAL DATE</code>, <code>LOCAL TIME</code> and <code>LOCAL DATETIME</code> are added in JPA 3.1 which return <code>LocalDate</code>, <code>LocalTime</code> and <code>LocalDateTime</code> from the <code>java.time</code> package.</p> JPQL Function CriteriaBuilder Method Description LOCAL DATE localDate() Returns current local date as defined by the database server. LOCAL DATETIME localDateTime() Returns current local date and time as defined by the database server. LOCAL TIME localTime() Returns current local time as defined by the database server."},{"location":"jpa/new/#extract-function","title":"<code>EXTRACT</code> Function","text":"<p>In SQL, the <code>extract</code> function can be applied on a datetime expression or function to return a number that stands for a part of the datetime. This function is now working in JPQL, it can also be used on a Java 8 DateTime field or property.</p> <pre><code>EXTRACT(datetime_field FROM datetime_expression)\n</code></pre> <p><code>EXTRACT</code> returns an integer if the datetime_field is one of the following value.</p> DateTime  Field Description YEAR returns the calendar year. QUARTER returns the calendar quarter, numbered from 1 to 4. MONTH returns the calendar month of the year, numbered from 1. WEEK returns the ISO-8601 week number. DAY returns the calendar day of the month, numbered from 1. HOUR returns the hour of the day in 24-hour time, numbered from 0 to 23. MINUTE returns the minute of the hour, numbered from 0 to 59. <p><code>EXTRACT</code> returns a float if the datetime_field is <code>SECOND</code>, which will return the second of the minute, numbered from 0 to 59, including a fractional part representing fractions of a second.</p>"},{"location":"jpa/new/#other-improvements","title":"Other Improvements","text":"<p>JPA 3.1 also includes some small improvements, such as <code>EntityManagerFactory</code> and <code>EntityManager</code> now implement <code>AutoClosable</code> interface. Thus you can use them in a try-resources block.</p> <pre><code>try(EntityManagerFactory emf=...) {\n\n}\n\ntry(EntityManager entityManager=...) {\n\n}\n</code></pre> <p>There is a full list to summarize all changes brought in JPA 3.1.</p> <p>In the next sections, we will create a simple Java project with Hibernate and a standard Jakarta Web project to experience the new features in JPA 3.1.</p>"},{"location":"rest/","title":"Jakarta REST","text":"<p>Jakarta REST provides a foundational API to develop web services following the Representational State Transfer (REST) architectural pattern.</p> <p>We will explore the new features introduced in Jakarta REST 3.1.</p>"},{"location":"rest/cdi-inject/","title":"Better alignment with CDI","text":"<p>In the initial Jakarta REST 3.1 proposal, an exciting feature is using CDI as default injection provider to replace the existing one in Jakarta REST, that means you can use <code>Inject</code> to replace Jakarta REST  <code>Context</code> to inject Jakarta REST specific resources. Unfortunately this feature is delayed to the next version, and not included in the final 3.1 version.</p> <p>But Jersey itself provides an extra module to implement this feature.</p> <p>Let's create a simple TODO Jakarta REST application to expose resources at the <code>/todos</code> endpoint.</p> <p>Firstly create a JPA entity - <code>Todo</code>.</p> <pre><code>@Entity\n@Table(name = \"todos\")\npublic class Todo implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.UUID)\n    UUID id;\n\n    String title;\n    boolean completed = false;\n\n    // setters and getters, hashCode and equals\n}\n</code></pre> <p>Create a simple EJB <code>@Stateless</code> bean to create a Todo and retrieve todos.</p> <pre><code>@Stateless\npublic class TodoService {\n\n    @PersistenceContext\n    EntityManager entityManager;\n\n   @Transactional\n    public Todo create(Todo data) {\n        entityManager.persist(data);\n        return data;\n    }\n\n    public Todo findById(UUID id) {\n        return entityManager.find(Todo.class, id);\n    }\n\n    public List&lt;Todo&gt; findAll() {\n        return entityManager.createQuery(\"select t from Todo t\", Todo.class).getResultList();\n    }\n}\n</code></pre> <p>Create a EJB <code>@Singleton</code> bean to initialize some sample data.</p> <pre><code>@Singleton\n@Startup\npublic class TodoSamples {\n    private static final Logger LOGGER = Logger.getLogger(TodoSamples.class.getName());\n    @Inject\n    TodoService todoService;\n\n    @PostConstruct\n    public void init() {\n        var todos = Stream.of(\"What's new in JPA 3.1?\", \"What's new in Jaxrs 3.1\", \"Learn new features in Faces 4.0\")\n                .map(Todo::new)\n                .map(it -&gt; todoService.create(it))\n                .toList();\n        LOGGER.log(Level.INFO, \"initialized todo samples: {0}\", todos);\n    }\n}\n</code></pre> <p>Now create a Jaxrs resource to expose <code>/todos</code> endpoint.</p> <pre><code>@Path(\"todos\")\n@RequestScoped\npublic class TodoResources {\n\n     @Inject\n    //@Context\n    ResourceContext resourceContext;\n\n    @Inject\n    // @Context\n    UriInfo uriInfo;\n\n    @Inject\n    TodoService todoService;\n\n    @GET\n    public Response getAllTodos() {\n        var todos = todoService.findAll();\n        return Response.ok(todos).build();\n    }\n\n    @POST\n    public Response createTodo(Todo todo) throws Exception {\n        var saved = todoService.create(todo);\n        return Response.created(uriInfo.getBaseUriBuilder().path(\"todos/{id}\").build(saved.getId())).build();\n    }\n\n    @GET\n    @Path(\"{id}\")\n    public TodoResource subResource() {\n        return resourceContext.getResource(TodoResource.class);\n    }\n}\n\n\n// TodoResource for single resource.\n@RequestScoped\npublic class TodoResource {\n\n    @Inject\n    TodoService todoService;\n\n    @PathParam(\"id\")\n    UUID id;\n\n    @GET\n    public Response getById() {\n        var todos = todoService.findById(id);\n        return Response.ok(todos).build();\n    }\n\n}\n</code></pre> <p>To make sure it works on GlassFish, copy <code>jersey-cdi-rs-inject</code> to the GlassFish GlassFish_installdir/glassfish/modules folder.</p> <p>Simply add the following fragment to the <code>glassfish</code> profile, and use <code>maven-dependency-plugin</code> to download a copy of <code>jersey-cdi-rs-inject</code> to the cargo managed GlassFish instance.</p> <pre><code>&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;\n    &lt;version&gt;${maven-dependency-plugin.version}&lt;/version&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;copy&lt;/id&gt;\n            &lt;phase&gt;process-classes&lt;/phase&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;copy&lt;/goal&gt;\n            &lt;/goals&gt;\n            &lt;configuration&gt;\n                &lt;artifactItems&gt;\n                    &lt;artifactItem&gt;\n                        &lt;groupId&gt;org.glassfish.jersey.ext.cdi&lt;/groupId&gt;\n                        &lt;artifactId&gt;jersey-cdi-rs-inject&lt;/artifactId&gt;\n                        &lt;version&gt;${jersey.version}&lt;/version&gt;\n                        &lt;type&gt;jar&lt;/type&gt;\n                        &lt;overWrite&gt;false&lt;/overWrite&gt;\n                    &lt;/artifactItem&gt;\n                &lt;/artifactItems&gt;\n                &lt;outputDirectory&gt;${project.build.directory}/cargo/installs/glassfish-${glassfish.version}/glassfish7/glassfish/modules&lt;/outputDirectory&gt;\n            &lt;/configuration&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Build and run the application, and use <code>curl</code> to test our endpoint <code>/todos</code>.</p> <pre><code>&gt; curl http://localhost:8080/rest-examples/api/todos\n[\n    {\n        \"Completed\": false,\n        \"Id\": \"7db8cb74-6ec6-4b3b-8930-e6a29a9c363a\",\n        \"Title\": \"Learn new features in Faces 4.0\"\n    },\n    {\n        \"Completed\": false,\n        \"Id\": \"0dba2afd-943f-42a2-b1bd-2cd9fea3a140\",\n        \"Title\": \"What's new in JPA 3.1?\"\n    },\n    {\n        \"Completed\": false,\n        \"Id\": \"ff7ac837-fe68-4d47-b79d-f11fd87fd43a\",\n        \"Title\": \"What's new in Jaxrs 3.1\"\n    }\n]\n</code></pre> <p>Create a simple Arquillian test to verify the functionality.</p> <pre><code>@ExtendWith(ArquillianExtension.class)\npublic class TodoResourceTest {\n\n    private final static Logger LOGGER = Logger.getLogger(TodoResourceTest.class.getName());\n\n    @Deployment(testable = false)\n    public static WebArchive createDeployment() {\n        File[] extraJars = Maven\n                .resolver()\n                .loadPomFromFile(\"pom.xml\")\n                .importCompileAndRuntimeDependencies()\n                .resolve(\"org.assertj:assertj-core\")\n                .withTransitivity()\n                .asFile();\n        var war = ShrinkWrap.create(WebArchive.class)\n                .addAsLibraries(extraJars)\n                .addClasses(\n                        TodoResource.class,\n                        TodoResources.class,\n                        TodoService.class,\n                        Todo.class,\n                        TodoSamples.class,\n                        RestConfig.class\n                )\n                .addAsResource(\"test-persistence.xml\", \"META-INF/persistence.xml\")\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        LOGGER.log(Level.INFO, \"war deployment: {0}\", new Object[]{war.toString(true)});\n        return war;\n    }\n\n    @ArquillianResource\n    private URL baseUrl;\n\n    Client client;\n\n    @BeforeEach\n    public void before() throws Exception {\n        LOGGER.log(Level.INFO, \"baseURL: {0}\", new Object[]{baseUrl.toExternalForm()});\n        client = ClientBuilder.newClient();\n    }\n\n    @AfterEach\n    public void after() throws Exception {\n        client.close();\n    }\n\n    @Test\n    @RunAsClient\n    public void testGetTodos() throws Exception {\n        var target = client.target(URI.create(baseUrl.toExternalForm() + \"api/todos\"));\n        Response r = target.request().accept(MediaType.APPLICATION_JSON_TYPE).get();\n        LOGGER.log(Level.INFO, \"Get /todos response status: {0}\", r.getStatus());\n        assertEquals(200, r.getStatus());\n        String jsonString = r.readEntity(String.class);\n        LOGGER.log(Level.INFO, \"Get /todos result string: {0}\", jsonString);\n    }\n}\n</code></pre> <p>To make the test be run successfully on GlassFish, similarly copy <code>jersey-cdi-rs-inject</code> to the target GlassFish server.</p> <p>In the <code>arq-glassfish-managed</code> Maven profile, find the <code>dependency-maven-plugin</code> config, add the following content at the end of <code>configuration</code> section.</p> <pre><code>&lt;execution&gt;\n    &lt;id&gt;copy&lt;/id&gt;\n    &lt;phase&gt;pre-integration-test&lt;/phase&gt;\n    &lt;goals&gt;\n        &lt;goal&gt;copy&lt;/goal&gt;\n    &lt;/goals&gt;\n    &lt;configuration&gt;\n        &lt;artifactItems&gt;\n            &lt;artifactItem&gt;\n                &lt;groupId&gt;org.glassfish.jersey.ext.cdi&lt;/groupId&gt;\n                &lt;artifactId&gt;jersey-cdi-rs-inject&lt;/artifactId&gt;\n                &lt;version&gt;${jersey.version}&lt;/version&gt;\n                &lt;type&gt;jar&lt;/type&gt;\n                &lt;overWrite&gt;false&lt;/overWrite&gt;\n            &lt;/artifactItem&gt;\n        &lt;/artifactItems&gt;\n        &lt;outputDirectory&gt;${project.build.directory}/glassfish7/glassfish/modules&lt;/outputDirectory&gt;\n    &lt;/configuration&gt;\n&lt;/execution&gt;\n</code></pre> <p>Then run <code>TodoResourceTest</code> test.</p> <pre><code>&gt; mvn clean verify -Parq-glassfish-managed -D\"it.test=TodoResourceTest\"\n...\n[INFO] --- maven-failsafe-plugin:3.0.0-M7:integration-test (integration-test) @ rest-examples ---\n[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running com.example.it.TodoResourceTest\nStarting database using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, start-database, -t]\nStarting database in the background.\nLog redirected to D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\databases\\derby.log.\nStarting container using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, start-domain, -t]\nAttempting to start domain1.... Please look at the server log for more details.....\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nDec 04, 2022 5:09:02 PM com.example.it.TodoResourceTest createDeployment\nINFO: war deployment: 4a77aebc-2b83-44e6-9ab0-f93e656e1b2c.war:\n/WEB-INF/\n/WEB-INF/lib/\n/WEB-INF/lib/assertj-core-3.23.1.jar\n/WEB-INF/lib/byte-buddy-1.12.10.jar\n/WEB-INF/classes/\n/WEB-INF/classes/com/\n/WEB-INF/classes/com/example/\n/WEB-INF/classes/com/example/TodoResource.class\n/WEB-INF/classes/com/example/TodoResources.class\n/WEB-INF/classes/com/example/TodoService.class\n/WEB-INF/classes/com/example/Todo.class\n/WEB-INF/classes/com/example/TodoSamples.class\n/WEB-INF/classes/com/example/RestConfig.class\n/WEB-INF/classes/META-INF/\n/WEB-INF/classes/META-INF/persistence.xml\n/WEB-INF/beans.xml\nDec 04, 2022 5:09:15 PM com.example.it.TodoResourceTest before\nINFO: baseURL: http://localhost:8080/4a77aebc-2b83-44e6-9ab0-f93e656e1b2c/\nDec 04, 2022 5:09:16 PM com.example.it.TodoResourceTest testGetTodos\nINFO: Get /todos response status: 200\nDec 04, 2022 5:09:16 PM com.example.it.TodoResourceTest testGetTodos\nINFO: Get /todos result string: [{\"completed\":false,\"id\":\"6686c811-71cb-40aa-a38a-24d775c679ba\",\"title\":\"Learn new features in Faces 4.0\"},{\"completed\":false,\"id\":\"8efb7123-0c43-46aa-aabc-0777494be620\",\"title\":\"What's new in JPA 3.1?\"},{\"completed\":false,\"id\":\"0478a20e-b8c1-4577-91e4-cc0362ab14d5\",\"title\":\"What's new in Jaxrs 3.1\"}]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 78.438 s - in com.example.it.TodoResourceTest\nStopping container using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, stop-domain, --kill, -t]\nStopping database using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, stop-database, -t]\nSun Dec 04 17:09:20 CST 2022 : Connection obtained for host: 0.0.0.0, port number 1527.\nSun Dec 04 17:09:20 CST 2022 : Apache Derby Network Server - 10.15.2.0 - (1873585) shutdown\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- maven-failsafe-plugin:3.0.0-M7:verify (integration-test) @ rest-examples ---\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:45 min\n[INFO] Finished at: 2022-12-04T17:09:21+08:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>Get the sample codes from my Github account.</p>"},{"location":"rest/jsonb/","title":"Customizing Jsonb","text":"<p>In Jakarta REST 3.1, it is possible to customize Jsonb to tune the serialization and deserialization of the HTTP messages.</p> <pre><code>@Provider\npublic class JsonbContextResolver implements ContextResolver&lt;Jsonb&gt; {\n    @Override\n    public Jsonb getContext(Class&lt;?&gt; type) {\n        JsonbConfig config = new JsonbConfig()\n                .withPropertyNamingStrategy(PropertyNamingStrategy.UPPER_CAMEL_CASE)\n                .withFormatting(true)\n                .withNullValues(false);\n        return JsonbBuilder.newBuilder().withConfig(config).build();\n    }\n}\n</code></pre> <p>In the config, we apply <code>UPPER_CAMEL_CASE</code> strategy on the property name, and format the output result to make it more readable, and filter out the null nodes in JSON.</p> <p>Let's create a simple Jakarta REST resource for test purpose.</p> <pre><code>@Path(\"greeting\")\n@RequestScoped\npublic class GreetingResource {\n\n    @GET\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response sayHello() {\n        var person = new GreetingRecord(\"Hantsy\", LocalDateTime.now());\n        return Response.ok(person).build();\n    }\n}\n\n// GreetingRecord\npublic record GreetingRecord(String name, LocalDateTime sentAt){}\n</code></pre> <p>Build and run the application on GlassFish or WildFly, and use <code>curl</code> to access the <code>/greeting</code> endpoint.</p> <pre><code>curl http://localhost:8080/rest-examples/api/greeting\n{\n    \"Name\": \"Hantsy\",\n    \"SentAt\": \"2022-12-04T15:06:10.2230204\"\n}\n</code></pre> <p>Let's create a simple Arquillian test to verify this functionality.</p> <pre><code>@ExtendWith(ArquillianExtension.class)\npublic class GreetingResourceTest {\n\n    private final static Logger LOGGER = Logger.getLogger(GreetingResourceTest.class.getName());\n\n    @Deployment(testable = false)\n    public static WebArchive createDeployment() {\n        File[] extraJars = Maven\n                .resolver()\n                .loadPomFromFile(\"pom.xml\")\n                .importCompileAndRuntimeDependencies()\n                .resolve(\"org.assertj:assertj-core\")\n                .withTransitivity()\n                .asFile();\n        var war = ShrinkWrap.create(WebArchive.class)\n                .addAsLibraries(extraJars)\n                .addClasses(GreetingResource.class, GreetingRecord.class, JsonbContextResolver.class, RestConfig.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        LOGGER.log(Level.INFO, \"war deployment: {0}\", new Object[]{war.toString(true)});\n        return war;\n    }\n\n    @ArquillianResource\n    private URL baseUrl;\n\n    Client client;\n\n    @BeforeEach\n    public void before() throws Exception {\n        LOGGER.log(Level.INFO, \"baseURL: {0}\", new Object[]{baseUrl.toExternalForm()});\n        client = ClientBuilder.newClient();\n        //client.register(JsonbContextResolver.class);\n    }\n\n    @AfterEach\n    public void after() throws Exception {\n        client.close();\n    }\n\n    @Test\n    @RunAsClient\n    public void testGetPerson() throws Exception {\n        var target = client.target(URI.create(baseUrl.toExternalForm() + \"api/greeting\"));\n        Response r = target.request().accept(MediaType.APPLICATION_JSON_TYPE).get();\n        LOGGER.log(Level.INFO, \"Get greeting response status: {0}\", r.getStatus());\n        assertEquals(200, r.getStatus());\n        String jsonString = r.readEntity(String.class);\n        LOGGER.log(Level.INFO, \"Get greeting result string: {0}\", jsonString);\n        assertThat(jsonString).doesNotContain(\"email\");\n        assertThat(jsonString).contains(\"Name\");\n    }\n\n}\n</code></pre> <p>Run the test against the previous GlassFish managed adapter that defined in the <code>arq-glassfish-managed</code> Maven profile.</p> <pre><code>&gt; mvn clean verify -Parq-glassfish-managed -D\"it.test=GreetingResourceTest\"\n...\n[INFO] --- maven-failsafe-plugin:3.0.0-M7:integration-test (integration-test) @ rest-examples ---\n[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running com.example.it.GreetingResourceTest\nStarting database using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, start-database, -t]\nStarting database in the background.\nLog redirected to D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\databases\\derby.log.\nStarting container using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, start-domain, -t]\nAttempting to start domain1.... Please look at the server log for more details.....\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nDec 04, 2022 3:12:58 PM com.example.it.GreetingResourceTest createDeployment\nINFO: war deployment: d8b12d32-3bac-4092-b30b-612bb887509f.war:\n/WEB-INF/\n/WEB-INF/lib/\n/WEB-INF/lib/assertj-core-3.23.1.jar\n/WEB-INF/lib/byte-buddy-1.12.10.jar\n/WEB-INF/classes/\n/WEB-INF/classes/com/\n/WEB-INF/classes/com/example/\n/WEB-INF/classes/com/example/GreetingResource.class\n/WEB-INF/classes/com/example/GreetingRecord.class\n/WEB-INF/classes/com/example/JsonbContextResolver.class\n/WEB-INF/classes/com/example/RestConfig.class\n/WEB-INF/beans.xml\nDec 04, 2022 3:13:08 PM com.example.it.GreetingResourceTest before\nINFO: baseURL: http://localhost:8080/d8b12d32-3bac-4092-b30b-612bb887509f/\nDec 04, 2022 3:13:08 PM com.example.it.GreetingResourceTest testGetPerson\nINFO: Get greeting response status: 200\nDec 04, 2022 3:13:08 PM com.example.it.GreetingResourceTest testGetPerson\nINFO: Get greeting result string: {\n    \"Name\": \"Hantsy\",\n    \"SentAt\": \"2022-12-04T15:13:08.4011684\"\n}\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 66.233 s - in com.example.it.GreetingResourceTest\nStopping container using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, stop-domain, --kill, -t]\nStopping database using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, stop-database, -t]\nSun Dec 04 15:13:13 CST 2022 : Connection obtained for host: 0.0.0.0, port number 1527.\nSun Dec 04 15:13:14 CST 2022 : Apache Derby Network Server - 10.15.2.0 - (1873585) shutdown\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- maven-failsafe-plugin:3.0.0-M7:verify (integration-test) @ rest-examples ---\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:37 min\n[INFO] Finished at: 2022-12-04T15:13:14+08:00\n[INFO] ------------------------------------------------------------------------\n</code></pre> <p>As you see, it works as expected.</p>"},{"location":"rest/multipart/","title":"Support for Multipart Media Type","text":"<p>Both Jersey and Resteasy have their own Multipart implementations. In Jakarta REST 3.1, it finally brings the standardized Multipart APIs support.</p> <p>Follow the steps in Jakarta Persistence - Jakarta EE and create a simple Jakarta EE project.</p> <p>Firstly let's a simple Jakarta REST resource to consume Multipart request and produce Multipart response.</p> <pre><code>@Path(\"multiparts\")\n@RequestScoped\npublic class MultipartResource {\n    private static final Logger LOGGER = Logger.getLogger(MultipartResource.class.getName());\n\n    java.nio.file.Path uploadedPath;\n\n    @PostConstruct\n    public void init() {\n        try {\n            uploadedPath = Files.createTempDirectory(Paths.get(\"/temp\"), \"uploads_\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    @Path(\"simple\")\n    @POST\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    public Response uploadFile(@FormParam(\"name\") String name,\n                               @FormParam(\"part\") EntityPart part) {\n        LOGGER.log(Level.INFO, \"name: {0} \", name);\n        LOGGER.log(\n                Level.INFO,\n                \"uploading file: {0},{1},{2},{3}\",\n                new Object[]{\n                        part.getMediaType(),\n                        part.getName(),\n                        part.getFileName(),\n                        part.getHeaders()\n                }\n        );\n        try {\n            Files.copy(\n                    part.getContent(),\n                    Paths.get(uploadedPath.toString(), part.getFileName().orElse(generateFileName(UUID.randomUUID().toString(), mediaTypeToFileExtension(part.getMediaType())))),\n                    StandardCopyOption.REPLACE_EXISTING\n            );\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        return Response.ok().build();\n\n    }\n\n    @Path(\"list\")\n    @POST\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\n    public Response uploadMultiFiles(List&lt;EntityPart&gt; parts) {\n        LOGGER.log(Level.INFO, \"Uploading files: {0}\", parts.size());\n        parts.forEach(\n                part -&gt; {\n                    LOGGER.log(\n                            Level.INFO,\n                            \"uploading multifiles: {0},{1},{2},{3}\",\n                            new Object[]{\n                                    part.getMediaType(),\n                                    part.getName(),\n                                    part.getFileName(),\n                                    part.getHeaders()\n                            }\n                    );\n                    try {\n                        Files.copy(\n                                part.getContent(),\n                                Paths.get(uploadedPath.toString(), part.getFileName().orElse(generateFileName(UUID.randomUUID().toString(), mediaTypeToFileExtension(part.getMediaType())))),\n                                StandardCopyOption.REPLACE_EXISTING\n                        );\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n        );\n\n        return Response.ok().build();\n    }\n\n    @GET\n    public List&lt;EntityPart&gt; getFiles() throws IOException {\n        List&lt;EntityPart&gt; parts = new ArrayList&lt;&gt;();\n        parts.add(EntityPart.withName(\"abd\")\n                .fileName(\"abc.text\").content(\"this is a text content\")\n                .mediaType(MediaType.TEXT_PLAIN_TYPE)\n                .build()\n        );\n        try (var files = Files.list(uploadedPath)) {\n            var partsInUploaded = files\n                    .map(path -&gt; {\n                                var file = path.toFile();\n                                LOGGER.log(Level.INFO, \"found uploaded file: {0}\", file.getName());\n                                try {\n                                    return EntityPart.withName(file.getName())\n                                            .fileName(file.getName())\n                                            .content(new FileInputStream(file))\n                                            .mediaType(fileExtensionToMediaType(getFileExt(file.getName())))\n                                            .build();\n                                } catch (IOException e) {\n                                    throw new RuntimeException(e);\n                                }\n                            }\n\n                    )\n                    .toList();\n            parts.addAll(partsInUploaded);\n        }\n\n        return parts;\n    }\n\n    private String getFileExt(String fileName) {\n        return fileName.substring(fileName.lastIndexOf(\".\") + 1);\n    }\n\n    private MediaType fileExtensionToMediaType(String extension) {\n        return switch (extension.toLowerCase()) {\n            case \"txt\" -&gt; MediaType.TEXT_PLAIN_TYPE;\n            case \"svg\" -&gt; MediaType.APPLICATION_SVG_XML_TYPE;\n            default -&gt; MediaType.APPLICATION_OCTET_STREAM_TYPE;\n        };\n    }\n\n    private String generateFileName(String fileName, String extension) {\n        return fileName + \".\" + extension;\n    }\n\n    private String mediaTypeToFileExtension(MediaType mediaType) {\n        return switch (mediaType.toString()) {\n            case \"text/plain\" -&gt; \"txt\";\n            case \"application/svg+xml\" -&gt; \"svg\";\n            default -&gt; \"bin\";\n        };\n    }\n}\n</code></pre> <p>To handle a <code>multipart/form-data</code> request, add <code>@Consumes(MediaType.MULTIPART_FORM_DATA)</code> on the Jaxrs resource methods. A Jaxrs resource can consume a single <code>EntityPart</code> or a collection of <code>EntityPart</code> .</p> <p>In the above example codes, the <code>uploadFile</code> method demonstrates how to handle a regular form post which includes a simple form value and a <code>EntityPart</code>, and <code>uploadMultiFiles</code> method is used to process a list of <code>EntityPart</code>. The <code>getFiles</code> method is used to produce a collection of Multipart entities to the client.</p> <p>Create a REST <code>Application</code> to activate Jakarta REST.</p> <pre><code>@ApplicationPath(\"api\")\npublic class RestConfig extends Application {\n}\n</code></pre> <p>Run the following command, it will build the project and package it into a war archive, and then start a GlassFish instance and deploy the war archive to GlassFish.</p> <pre><code>&gt; mvn clean package cargo:run\n</code></pre> <p>Alternatively, run the following command to deploy to WildFly if you prefer WildFly.</p> <pre><code>&gt; mvn clean wildfly:run\n</code></pre> <p>When the deployment work is done, open another terminal, and let's test our endpoints with <code>curl</code> command.</p> <pre><code>&gt; curl -i -X POST  http://localhost:8080/rest-examples/api/multiparts/simple -F \"name=Hantsy\" -F \"part=@D:\\temp\\test.txt\" -H \"Content-Type: multipart/form-data\"\nHTTP/1.1 200 OK\nServer: Eclipse GlassFish  7.0.0\n</code></pre> <p>Open the GlassFish server.log file, it appends the following new info.</p> <pre><code>[2022-12-03T20:52:36.002626+08:00] [GlassFish 7.0] [INFO] [] [com.example.MultipartResource] [tid: _ThreadID=61 _ThreadName=http-listener-1(1)] [levelValue: 800] [[\n  name: Hantsy ]]\n\n[2022-12-03T20:52:36.003632+08:00] [GlassFish 7.0] [INFO] [] [com.example.MultipartResource] [tid: _ThreadID=61 _ThreadName=http-listener-1(1)] [levelValue: 800] [[\n  uploading file: text/plain,part,Optional[test.txt],{Content-Disposition=[form-data; name=\"part\"; filename=\"test.txt\"], Content-Type=[text/plain]}]]\n</code></pre> <p>Let's try to upload multiple files using <code>/list</code> endpoints.</p> <pre><code>&gt; curl -i -X POST  http://localhost:8080/rest-examples/api/multiparts/list -F \"test=@D:\\temp\\test.txt\" -F \"test2=@D:\\temp\\test2.txt\" -H \"Content-Type: multipart/form-data\"\nHTTP/1.1 200 OK\nServer: Eclipse GlassFish  7.0.0\n</code></pre> <p>In the GlassFish server.log file, the following new log is newly added.</p> <pre><code>[2022-12-03T20:58:54.140995+08:00] [GlassFish 7.0] [INFO] [] [com.example.MultipartResource] [tid: _ThreadID=65 _ThreadName=http-listener-1(5)] [levelValue: 800] [[\n  Uploading files: 2]]\n\n[2022-12-03T20:58:54.142996+08:00] [GlassFish 7.0] [INFO] [] [com.example.MultipartResource] [tid: _ThreadID=65 _ThreadName=http-listener-1(5)] [levelValue: 800] [[\n  uploading multifiles: text/plain,test,Optional[test.txt],{Content-Disposition=[form-data; name=\"test\"; filename=\"test.txt\"], Content-Type=[text/plain]}]]\n\n[2022-12-03T20:58:54.145995+08:00] [GlassFish 7.0] [INFO] [] [com.example.MultipartResource] [tid: _ThreadID=65 _ThreadName=http-listener-1(5)] [levelValue: 800] [[\n  uploading multifiles: text/plain,test2,Optional[test2.txt],{Content-Disposition=[form-data; name=\"test2\"; filename=\"test2.txt\"], Content-Type=[text/plain]}]]\n</code></pre> <p>Let's try to send a <code>GET</code> request to fetch the multipart data.</p> <pre><code>&gt;curl -v http://localhost:8080/rest-examples/api/multiparts -H \"Accept: multipart/form-data\"\n\n* Connected to localhost (127.0.0.1) port 8080 (#0)\n&gt; GET /rest-examples/api/multiparts HTTP/1.1\n&gt; Host: localhost:8080\n&gt; User-Agent: curl/7.83.1\n&gt; Accept: multipart/form-data\n&gt;\n* Mark bundle as not supporting multiuse\n&lt; HTTP/1.1 200 OK\n&lt; Server: Eclipse GlassFish  7.0.0\n&lt; X-Powered-By: Servlet/6.0 JSP/3.1(Eclipse GlassFish  7.0.0  Java/Oracle Corporation/17)\n&lt; MIME-Version: 1.0\n&lt; Content-Type: multipart/form-data;boundary=Boundary_1_1941664842_1670072479638\n&lt; Content-Length: 197\n&lt;\n--Boundary_1_1941664842_1670072479638\nContent-Type: text/plain\nContent-Disposition: form-data; filename=\"abc.text\"; name=\"abd\"\n\nthis is a text content\n--Boundary_1_1941664842_1670072479638--\n</code></pre> <p>Jaxrs also includes Client API to shake hands with the Multipart endpoints. With the Client API, it is easy to upload or download the Multipart entities.</p> <p>Let's create an Arquillian test and use Jaxrs Client API to verify the above endpoints.</p> <pre><code>@ExtendWith(ArquillianExtension.class)\npublic class MultipartResourceTest {\n\n    private final static Logger LOGGER = Logger.getLogger(MultipartResourceTest.class.getName());\n\n    @Deployment(testable = false)\n    public static WebArchive createDeployment() {\n        File[] extraJars = Maven\n                .resolver()\n                .loadPomFromFile(\"pom.xml\")\n                .importCompileAndRuntimeDependencies()\n                .resolve(\"org.assertj:assertj-core\")\n                .withTransitivity()\n                .asFile();\n        var war = ShrinkWrap.create(WebArchive.class)\n                .addAsLibraries(extraJars)\n                .addClasses(MultipartResource.class, RestConfig.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        LOGGER.log(Level.INFO, \"war deployment: {0}\", new Object[]{war.toString(true)});\n        return war;\n    }\n\n    @ArquillianResource\n    private URL baseUrl;\n\n    Client client;\n\n    @BeforeEach\n    public void before() throws Exception {\n        LOGGER.log(Level.INFO, \"baseURL: {0}\", new Object[]{baseUrl.toExternalForm()});\n        client = ClientBuilder.newClient();\n        client.register(MultiPartFeature.class);\n    }\n\n    @AfterEach\n    public void after() throws Exception {\n        client.close();\n    }\n\n    @Test\n    @RunAsClient\n    public void testUploadSingleFile() throws Exception {\n        var target = client.target(URI.create(baseUrl.toExternalForm() + \"api/multiparts/simple\"));\n        var part = EntityPart.withName(\"part\").fileName(\"test.txt\")\n                .content(this.getClass().getResourceAsStream(\"/test.txt\"))\n                .mediaType(MediaType.TEXT_PLAIN_TYPE)\n                .build();\n        var name = EntityPart.withName( \"name\").content(\"test\").build();\n        var genericEntity = new GenericEntity&lt;List&lt;EntityPart&gt;&gt;(List.of(name, part)) {};\n        var entity = Entity.entity(genericEntity, MediaType.MULTIPART_FORM_DATA);\n        Response r = target.request(MediaType.MULTIPART_FORM_DATA).post(entity);\n        LOGGER.log(Level.INFO, \"response status: {0}\", r.getStatus());\n        assertEquals(200, r.getStatus());\n    }\n\n    @Test\n    @RunAsClient\n    public void testUploadMultiFiles() throws Exception {\n        var target = client.target(URI.create(baseUrl.toExternalForm() + \"api/multiparts/list\"));\n        List&lt;EntityPart&gt; parts = List.of(\n                EntityPart.withName(\"textFile\").fileName(\"test.txt\")\n                        .content(this.getClass().getResourceAsStream(\"/test.txt\"))\n                        .mediaType(MediaType.TEXT_PLAIN_TYPE)\n                        .build(),\n                EntityPart.withName(\"imageFile\").fileName(\"test.svg\")\n                        .content(this.getClass().getResourceAsStream(\"/test.svg\"))\n                        .mediaType(MediaType.APPLICATION_SVG_XML_TYPE)\n                        .build()\n        );\n        var genericEntity = new GenericEntity&lt;List&lt;EntityPart&gt;&gt;(parts) {};\n        var entity = Entity.entity(genericEntity, MediaType.MULTIPART_FORM_DATA);\n        Response r = target.request().post(entity);\n        assertEquals(200, r.getStatus());\n        LOGGER.log(Level.INFO, \"Upload multiple files response status: {0}\", r.getStatus());\n    }\n\n    @Test\n    @RunAsClient\n    public void testGetFiles() {\n        var target = client.target(URI.create(baseUrl.toExternalForm() + \"api/multiparts\"));\n        Response response = target.request().accept(MediaType.MULTIPART_FORM_DATA).get();\n\n        assertEquals(200, response.getStatus());\n        LOGGER.log(Level.INFO, \"GetFiles response status: {0}\", response.getStatus());\n        List&lt;EntityPart&gt; parts = response.readEntity(new GenericType&lt;List&lt;EntityPart&gt;&gt;() {});\n        parts.forEach(part -&gt; LOGGER.log(\n                Level.INFO,\n                \"Get file: {0},{1},{2},{3}\",\n                new Object[]{\n                        part.getMediaType(),\n                        part.getName(),\n                        part.getFileName(),\n                        part.getHeaders()\n                }\n        ));\n    }\n}\n</code></pre> <p>In this test, there are three methods to verify the functionality of uploading a single file, uploading a collection of files, and reading the files from server side.</p> <p>Run the following command to execute the test.</p> <pre><code>&gt;  mvn clean verify -Parq-glassfish-managed -D\"it.test=MultipartResourceTest\"\n...\n\n[INFO] --- maven-failsafe-plugin:3.0.0-M7:integration-test (integration-test) @ rest-examples ---\n[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider\n[INFO]\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running com.example.it.MultipartResourceTest\nStarting database using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, start-database, -t]\nStarting database in the background.\nLog redirected to D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\databases\\derby.log.\nStarting container using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, start-domain, -t]\nAttempting to start domain1.... Please look at the server log for more details.....\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\nDec 03, 2022 9:21:19 PM com.example.it.MultipartResourceTest createDeployment\nINFO: war deployment: 3ca3304d-1523-4473-bd4d-a7074b2ae48b.war:\n/WEB-INF/\n/WEB-INF/lib/\n/WEB-INF/lib/assertj-core-3.23.1.jar\n/WEB-INF/lib/byte-buddy-1.12.10.jar\n/WEB-INF/classes/\n/WEB-INF/classes/com/\n/WEB-INF/classes/com/example/\n/WEB-INF/classes/com/example/MultipartResource.class\n/WEB-INF/classes/com/example/RestConfig.class\n/WEB-INF/beans.xml\nDec 03, 2022 9:21:28 PM com.example.it.MultipartResourceTest before\nINFO: baseURL: http://localhost:8080/3ca3304d-1523-4473-bd4d-a7074b2ae48b/\nDec 03, 2022 9:21:28 PM com.example.it.MultipartResourceTest testUploadSingleFile\nINFO: response status: 200\nDec 03, 2022 9:21:28 PM com.example.it.MultipartResourceTest before\nINFO: baseURL: http://localhost:8080/3ca3304d-1523-4473-bd4d-a7074b2ae48b/\nDec 03, 2022 9:21:28 PM com.example.it.MultipartResourceTest testGetFiles\nINFO: GetFiles response status: 200\nDec 03, 2022 9:21:28 PM com.example.it.MultipartResourceTest lambda$testGetFiles$0\nINFO: Get file: text/plain,abd,Optional[abc.text],{Content-Type=[text/plain], Content-Disposition=[form-data; filename=\"abc.text\"; name=\"abd\"]}\nDec 03, 2022 9:21:28 PM com.example.it.MultipartResourceTest lambda$testGetFiles$0\nINFO: Get file: text/plain,test.txt,Optional[test.txt],{Content-Type=[text/plain], Content-Disposition=[form-data; filename=\"test.txt\"; name=\"test.txt\"]}\nDec 03, 2022 9:21:28 PM com.example.it.MultipartResourceTest before\nINFO: baseURL: http://localhost:8080/3ca3304d-1523-4473-bd4d-a7074b2ae48b/\nDec 03, 2022 9:21:28 PM com.example.it.MultipartResourceTest testUploadMultiFiles\nINFO: Upload multiple files response status: 200\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 74.084 s - in com.example.it.MultipartResourceTest\nStopping container using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, stop-domain, --kill, -t]\nStopping database using command: [java, -jar, D:\\hantsylabs\\jakartaee10-sandbox\\rest\\target\\glassfish7\\glassfish\\modules\\admin-cli.jar, stop-database, -t]\nSat Dec 03 21:21:33 CST 2022 : Connection obtained for host: 0.0.0.0, port number 1527.\nSat Dec 03 21:21:33 CST 2022 : Apache Derby Network Server - 10.15.2.0 - (1873585) shutdown\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO]\n[INFO] --- maven-failsafe-plugin:3.0.0-M7:verify (integration-test) @ rest-examples ---\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  01:44 min\n[INFO] Finished at: 2022-12-03T21:21:34+08:00\n[INFO] ------------------------------------------------------------------------\n</code></pre>"},{"location":"rest/new/","title":"What's New in Jakarta REST 3.1","text":"<p>Jakarta REST 3.1 includes a dozen of small improvements, and also introduces two major new features.</p> <ul> <li>Java SE Bootstrap API</li> <li>The long-awaited standard Multipart API</li> </ul> <p>Let's explore these features by examples.</p>"},{"location":"rest/se-bootstrap/","title":"Java SE Bootstrap API","text":"<p>Like the CDI Bootstrap API to host a CDI container in Java SE environment, Jakarta REST Bootstrap API provides similar API to serve a Jaxrs application in embedded servers.</p>"},{"location":"rest/se-bootstrap/#creating-java-se-project","title":"Creating Java SE Project","text":"<p>Follow the steps in the Jakarta Persistence - Example: Hibernate 6.1 to create a simple Java SE project.</p> <p>We will use sl4j/logback as logging framework, and also use Lombok annotations to simplify the Java codes.</p> <p>Add the following dependencies in the project pom.xml.</p> <pre><code>&lt;!-- Lombok --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n    &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n    &lt;optional&gt;true&lt;/optional&gt;\n    &lt;version&gt;1.18.24&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- logging with logback --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n    &lt;version&gt;2.0.4&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n    &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;\n    &lt;version&gt;2.0.4&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n    &lt;artifactId&gt;logback-core&lt;/artifactId&gt;\n    &lt;version&gt;1.4.4&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;\n    &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;\n    &lt;version&gt;1.4.4&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Create src/main/resources/logback.xml to set up Logback.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;configuration&gt;\n\n    &lt;property name=\"LOGS\" value=\"./logs\"/&gt;\n\n    &lt;appender name=\"Console\"\n              class=\"ch.qos.logback.core.ConsoleAppender\"&gt;\n        &lt;layout class=\"ch.qos.logback.classic.PatternLayout\"&gt;\n            &lt;Pattern&gt;\n                %green(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable\n            &lt;/Pattern&gt;\n        &lt;/layout&gt;\n    &lt;/appender&gt;\n\n    &lt;appender name=\"RollingFile\"\n              class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;\n        &lt;file&gt;${LOGS}/app.log&lt;/file&gt;\n        &lt;encoder\n                class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"&gt;\n            &lt;Pattern&gt;%d %p %C{1.} [%t] %m%n&lt;/Pattern&gt;\n        &lt;/encoder&gt;\n\n        &lt;rollingPolicy\n                class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"&gt;\n            &lt;!-- rollover daily and when the file reaches 10 MegaBytes --&gt;\n            &lt;fileNamePattern&gt;${LOGS}/archived/app-%d{yyyy-MM-dd}.%i.log\n            &lt;/fileNamePattern&gt;\n            &lt;timeBasedFileNamingAndTriggeringPolicy\n                    class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"&gt;\n                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;\n            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;\n        &lt;/rollingPolicy&gt;\n    &lt;/appender&gt;\n\n    &lt;!-- LOG everything at INFO level --&gt;\n    &lt;root level=\"info\"&gt;\n        &lt;appender-ref ref=\"RollingFile\"/&gt;\n        &lt;appender-ref ref=\"Console\"/&gt;\n    &lt;/root&gt;\n    &lt;logger name=\"org.glassfish.jersey.server\" level=\"DEBUG\"&gt;\n    &lt;/logger&gt;\n    &lt;logger name=\"com.example\" level=\"debug\" additivity=\"false\"&gt;\n        &lt;appender-ref ref=\"RollingFile\"/&gt;\n        &lt;appender-ref ref=\"Console\"/&gt;\n    &lt;/logger&gt;\n&lt;/configuration&gt;\n</code></pre> <p>Add the Jakarta REST API into the dependencies.</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;jakarta.ws.rs&lt;/groupId&gt;\n        &lt;artifactId&gt;jakarta.ws.rs-api&lt;/artifactId&gt;\n        &lt;version&gt;3.1.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    //...\n&lt;/dependencies&gt;\n</code></pre> <p>Create a main class as the application entry.</p> <pre><code>@Slf4j\npublic class Main {\n\n    public static void main(String[] args) throws InterruptedException, IOException {\n        SeBootstrap.Configuration configuration = SeBootstrap.Configuration.builder()\n                .host(\"localhost\")\n                .port(8080)\n                .protocol(\"http\")\n                .build();\n        SeBootstrap.start(RestConfig.class, configuration)\n            .thenAccept(instance -&gt; {\n                    instance.stopOnShutdown(stopResult -&gt; log.debug(\n                                    \"Stop result: {} [Native stop result: {}]\",\n                                    stopResult,\n                                    stopResult.unwrap(Object.class)));\n                    final URI uri = instance.configuration().baseUri();\n\n                    log.debug(\n                                    \"Instance {} running at {} [Native handle: {}].%n\",\n                                    instance, uri,\n                                    instance.unwrap(Object.class));\n                    log.debug(\"Send SIGKILL to shutdown.\");\n            })\n            .toCompletableFuture().join();\n\n        // stop quit.\n        System.in.read();\n    }\n}\n</code></pre> <p>The <code>@Slf4j</code> is from Lombok, which will add a <code>org.slf4j.Logger</code> declaration to <code>Main</code> class at compile time.</p> <p>To customize <code>SeBootstrap</code>, use <code>SeBootstrap.Configuration.builder()</code> to produces a <code>SeBootstrap.Configuration</code> which can be used as a parameter to start <code>SeBootstrap</code> instance.</p> <p>The <code>SeBootstrap.start</code> accepts the REST <code>Application</code> entry class and an optional <code>SeBootstrap.Configuration</code>, in <code>thenAccept</code> block, a Bootstrap server instance is available to consume. The <code>instance.stopOnShutdown</code> is used to setup a shutdown hook, then print the application startup information.</p> <p>The <code>.toCompletableFuture().join()</code> will wait the asynchronous execution to be completed.</p> <p>Let's have a look at <code>RestConfig</code> - which is the REST Application entry class.</p> <pre><code>@ApplicationPath(\"/api\")\npublic class RestConfig extends Application {\n    @Override\n    public Set&lt;Class&lt;?&gt;&gt; getClasses() {\n        return Set.of(GreetingResource.class);\n    }\n}\n</code></pre> <p>Add a simple Jaxrs Resource - <code>GreetingResource</code>.</p> <pre><code>@Path(\"greeting\")\n@RequestScoped\npublic class GreetingResource {\n\n    @GET\n    public String hello(@QueryParam(\"name\") String name) {\n        return \"Say 'Hello' to \" + (name == null ? \"World\" : name) + \" at \" + LocalDateTime.now();\n    }\n}\n</code></pre> <p>Although CDI beans.xml is optional in Jakarta EE environment, it is a must when using SeBootstrap API in a Java SE environment.</p> <p>Create an empty CDI beans.xml, put it into the project folder src/main/resources/META-INFO.</p> <pre><code>&lt;beans xmlns=\"https://jakarta.ee/xml/ns/jakartaee\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/beans_4_0.xsd\"\n  bean-discovery-mode=\"annotated\" version=\"4.0\"&gt;\n&lt;/beans&gt;\n</code></pre> <p>To run this application, it requires a HTTP embedded server at runtime. Both Jersey and Resteasy provides several options.</p>"},{"location":"rest/se-bootstrap/#jersey","title":"Jersey","text":"<p>Create a standard Maven profile for Jersey, add the following dependencies.</p> <pre><code>&lt;profiles&gt;\n    &lt;profile&gt;\n        &lt;id&gt;jersey&lt;/id&gt;\n        &lt;activation&gt;\n            &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;\n        &lt;/activation&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.glassfish.jersey.core&lt;/groupId&gt;\n                &lt;artifactId&gt;jersey-server&lt;/artifactId&gt;\n            &lt;/dependency&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.glassfish.jersey.containers&lt;/groupId&gt;\n                &lt;artifactId&gt;jersey-container-jdk-http&lt;/artifactId&gt;\n            &lt;/dependency&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.glassfish.jersey.inject&lt;/groupId&gt;\n                &lt;artifactId&gt;jersey-cdi2-se&lt;/artifactId&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/profile&gt;\n    //...\n</code></pre> <p>There are several Jersey containers provided in the latest Jersey. Here we used the simplest one which is based on the JDK built-in HttpServer.</p> <p>Now run the <code>Main</code> class in your IDEs directly by click the run button.</p> <p>You will see the following info in the console window.</p> <pre><code>Nov 22, 2022 10:42:46 PM org.glassfish.jersey.message.internal.MessagingBinders$EnabledProvidersBinder bindToBinder\nWARNING: A class jakarta.activation.DataSource for a default provider MessageBodyWriter&lt;jakarta.activation.DataSource&gt; was not found. The provider is not available.\nNov 22, 2022 10:42:46 PM org.glassfish.jersey.server.wadl.WadlFeature configure\nWARNING: JAX-B API not found . WADL feature is disabled.\n2022-11-22 22:42:46,667 INFO  [ForkJoinPool.commonPool-worker-1] org.jboss.weld.bootstrap.WeldStartup: WELD-000900: 5.0.1 (Final)\n2022-11-22 22:42:46,935 INFO  [ForkJoinPool.commonPool-worker-1] org.jboss.weld.environment.deployment.discovery.ReflectionDiscoveryStrategy: WELD-ENV-000014: Falling back to Java Reflection for bean-discovery-mode=\"annotated\" discovery. Add org.jboss:jandex to the classpath to speed-up startup.\n2022-11-22 22:42:47,035 INFO  [ForkJoinPool.commonPool-worker-1] org.jboss.weld.bootstrap.WeldStartup: WELD-000101: Transactional services not available. Injection of @Inject UserTransaction not available. Transactional observers will be invoked synchronously.\n2022-11-22 22:42:47,796 INFO  [ForkJoinPool.commonPool-worker-1] org.jboss.weld.environment.se.WeldContainer: WELD-ENV-002003: Weld SE container eb0f72e8-e3e1-4f72-bbae-045cc3791db4 initialized\n2022-11-22 22:42:48,005 DEBUG [ForkJoinPool.commonPool-worker-1] com.example.Main: Instance org.glassfish.jersey.server.internal.RuntimeDelegateImpl$1@2c7c9fa9 running at http://localhost:8080/ [Native handle: org.glassfish.jersey.jdkhttp.JdkHttpServer@57458589].%n\n2022-11-22 22:42:48,006 DEBUG [ForkJoinPool.commonPool-worker-1] com.example.Main: Send SIGKILL to shutdown.\n</code></pre> <p>Open another terminal window, and use <code>curl</code> command to test the <code>/api/greeting</code> endpoint.</p> <pre><code>curl http://localhost:8080/api/greeting?name=Hantsy\n\nSay 'Hello' to Hantsy at 2022-11-22T22:45:41.129167100\n</code></pre> <p>Utilize with maven-assemble-plugin, it will package the application classes with all dependencies into one archive.</p> <pre><code> &lt;!-- Maven Assembly Plugin --&gt;\n&lt;plugin&gt;\n    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n    &lt;version&gt;3.4.2&lt;/version&gt;\n    &lt;configuration&gt;\n        &lt;descriptorRefs&gt;\n            &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n        &lt;/descriptorRefs&gt;\n        &lt;!-- MainClass in mainfest make a executable jar --&gt;\n        &lt;archive&gt;\n            &lt;manifest&gt;\n                &lt;addClasspath&gt;true&lt;/addClasspath&gt;\n                &lt;mainClass&gt;com.example.Main&lt;/mainClass&gt;\n            &lt;/manifest&gt;\n        &lt;/archive&gt;\n\n    &lt;/configuration&gt;\n    &lt;executions&gt;\n        &lt;execution&gt;\n            &lt;id&gt;make-assembly&lt;/id&gt;\n            &lt;phase&gt;package&lt;/phase&gt; &lt;!-- bind to the packaging phase --&gt;\n            &lt;goals&gt;\n                &lt;goal&gt;single&lt;/goal&gt;\n            &lt;/goals&gt;\n        &lt;/execution&gt;\n    &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre> <p>Open a terminal, and switch to the project root, and run the following command to build the application into a jar archive.</p> <pre><code>&gt;mvn clean package -DskipTests -D\"maven.test.skip=true\"\n...\n[INFO]\n[INFO] --- maven-assembly-plugin:3.4.2:single (make-assembly) @ rest-se-bootstrap-examples ---\n[INFO] Building jar: D:\\hantsylabs\\jakartaee10-sandbox\\rest-se-bootstrap\\target\\rest-se-bootstrap-examples-jar-with-dependencies.jar\n...\n</code></pre> <p>Then run the application using the following command.</p> <pre><code>&gt;java -jar .\\target\\rest-se-bootstrap-examples-jar-with-dependencies.jar\n...\nWELD-000101: Transactional services not available. Injection of @Inject UserTransaction not available.\nTransactional observers will be invoked synchronously.\n2022-11-26 13:50:45,132 INFO  [ForkJoinPool.commonPool-worker-1] org.jboss.weld.environment.se.WeldContainer: WELD-ENV-002003: Weld SE container 4744564b-922c-4612-a88f-8095c4d7293b initialized\n2022-11-26 13:50:45,257 DEBUG [ForkJoinPool.commonPool-worker-1] com.example.Main: Instance org.glassfish.jersey.server.internal.RuntimeDelegateImpl$1@2fa5468d running at http://localhost:8080/ [Native handle: org.glassfish.jersey.jdkhttp.JdkHttpServer@78879a1c].%n\n2022-11-26 13:50:45,257 DEBUG [ForkJoinPool.commonPool-worker-1] com.example.Main: Send SIGKILL to shutdown.\n</code></pre> <p>Similarly you can use the above <code>curl</code> command to verify the <code>/greeting</code> endpoint.</p>"},{"location":"rest/se-bootstrap/#resteasy","title":"Resteasy","text":"<p>Let's switch to use Redhat Resteasy as runtime.</p> <p>Create a new Maven profile for Resteasy.</p> <pre><code>&lt;profile&gt;\n    &lt;id&gt;resteasy&lt;/id&gt;\n    &lt;properties&gt;\n        &lt;jboss-logmanager.version&gt;2.1.19.Final&lt;/jboss-logmanager.version&gt;\n    &lt;/properties&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jboss.logmanager&lt;/groupId&gt;\n            &lt;artifactId&gt;jboss-logmanager&lt;/artifactId&gt;\n            &lt;version&gt;${jboss-logmanager.version}&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.jboss.resteasy&lt;/groupId&gt;\n            &lt;artifactId&gt;resteasy-undertow-cdi&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n                &lt;configuration&gt;\n                    &lt;systemPropertyVariables&gt;\n                        &lt;java.util.logging.manager&gt;org.jboss.logmanager.LogManager&lt;/java.util.logging.manager&gt;\n                    &lt;/systemPropertyVariables&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/profile&gt;\n</code></pre> <p>There are several Embedded containers existed in the latest Resteasy. Here we choose <code>resteasy-undertow-cdi</code> that based on Redhat Undertow with CDI support.</p> <p>Open a terminal, switch to the project root, and run the following command to start the application in this Resteasy embedded server.</p> <pre><code>&gt;mvn clean package -Presteasy  -DskipTests -D\"maven.test.skip=true\"\n...\n[INFO] --- maven-assembly-plugin:3.4.2:single (make-assembly) @ rest-se-bootstrap-examples ---\n[INFO] Building jar: D:\\hantsylabs\\jakartaee10-sandbox\\rest-se-bootstrap\\target\\rest-se-bootstrap-examples-jar-with-dependencies.jar\n...\n&gt;java -jar .\\target\\rest-se-bootstrap-examples-jar-with-dependencies.jar\n\n...\norg.jboss.weld.environment.undertow.UndertowContainer: WELD-ENV-001302: Undertow detected, CDI injection will be available in Servlets, Filters and Listeners.\n2022-11-26 13:44:37,430 DEBUG [ForkJoinPool.commonPool-worker-1] com.example.Main: Instance org.jboss.resteasy.core.se.ResteasySeInstance@56cb9a0d running at http://localhost:8080/ [Native handle: dev.resteasy.embedded.server.UndertowCdiEmbeddedServer@80a8d12].%n\n2022-11-26 13:44:37,431 DEBUG [ForkJoinPool.commonPool-worker-1] com.example.Main: Send SIGKILL to shutdown.\n</code></pre>"},{"location":"rest/se-bootstrap/#testing-rest-endpoint","title":"Testing REST Endpoint","text":"<p>With Bootstrap API, it is easy to start and stop the application in JUnit lifecycle hooks.</p> <pre><code>@Slf4j\npublic class SeBootstrapTest {\n    SeBootstrap.Instance instance;\n\n    @SneakyThrows\n    @BeforeEach\n    public void setup() {\n        var latch = new CountDownLatch(1);\n        SeBootstrap.start(RestConfig.class)\n                .thenAccept(it -&gt; {\n                    instance = it;\n                    latch.countDown();\n                })\n                .toCompletableFuture().join();\n\n        latch.await(1000, java.util.concurrent.TimeUnit.MILLISECONDS);\n    }\n\n    @AfterEach\n    public void teardown() {\n        instance.stop()\n                .thenAccept(\n                        stopResult -&gt; log.debug(\n                                \"Stop result: {} [Native stop result: {}]\",\n                                stopResult,\n                                stopResult.unwrap(Object.class)\n                        )\n                ).toCompletableFuture().join();\n\n    }\n\n// tests\n}\n</code></pre> <p>Add a test to verify the functionality of <code>GreetingResource</code>.</p> <pre><code>@Slf4j\npublic class SeBootstrapTest {\n\n    private final ExecutorService executorService = Executors.newFixedThreadPool(5);\n\n    private final HttpClient httpClient = HttpClient.newBuilder()\n            .executor(executorService)\n            .version(HttpClient.Version.HTTP_2)\n            .build();\n\n    // @BeforeEach and @AfterEach...\n\n    @Test\n    public void testGreetingEndpoints() {\n        var greetingUri = instance.configuration().baseUriBuilder().path(\"/api/greeting\").queryParam(\"name\", \"Hantsy\").build();\n        log.debug(\"greetingUri: {}\", greetingUri);\n        this.httpClient\n                .sendAsync(\n                        HttpRequest.newBuilder()\n                                .GET()\n                                .uri(greetingUri)\n                                .header(\"Accept\", \"application/json\")\n                                .build()\n                        ,\n                        HttpResponse.BodyHandlers.ofString()\n                )\n                .thenApply(HttpResponse::body)\n                .thenAccept(body -&gt; {\n                    log.debug(\"Greeting: {}\", body);\n                    assertThat(body).contains(\"Say 'Hello' to Hantsy at\");\n                })\n                .join();\n    }\n}\n</code></pre> <p>Here we use Java 11 built-in HttClient to shake hands with the <code>/api/greeting</code> endpoint.</p> <p>Execute the following command to run tests.</p> <pre><code>&gt;mvn clean test\n...\n2022-11-26 16:45:57,721 DEBUG [main] com.example.SeBootstrapTest: greetingUri: http://localhost:8080/api/greeting?name=Hantsy\n2022-11-26 16:45:58,103 DEBUG [ForkJoinPool.commonPool-worker-1] com.example.SeBootstrapTest: Greeting: Say 'Hello' to Hantsy at 2022-11-26T16:45:58.022505600\n2022-11-26 16:45:58,211 INFO  [ForkJoinPool.commonPool-worker-1] org.jboss.weld.environment.se.WeldContainer: WELD-ENV-002001: Weld SE\ncontainer e388f80d-f026-41cb-999d-6f2ed757a1b5 shut down\n2022-11-26 16:45:58,213 DEBUG [ForkJoinPool.commonPool-worker-1] com.example.SeBootstrapTest: Stop result: org.glassfish.jersey.server.internal.RuntimeDelegateImpl$1$1@2df99c23 [Native stop result: null]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.694 s - in com.example.SeBootstrapTest\n[INFO]\n[INFO] Results:\n[INFO]\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n[INFO]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  15.225 s\n[INFO] Finished at: 2022-11-26T16:45:58+08:00\n[INFO] ------------------------------------------------------------------------\n</code></pre>"},{"location":"security/","title":"Jakarta Security","text":"<p>Jakarta Security is based on the existing Jakarta Authentication and Jakarta Authorization, and defines a standard for securing your Jakarta EE applications.</p>"},{"location":"security/auth0/","title":"Auth0","text":"<p>Auth0 is one of the most popular cloud IDP providers.</p> <p>Next, We will try to use Auth0 to replace KeyCloak as our OAuth2/OIDC authentication server role in our Jakarta EE application.</p> <p>If you do not have a Auth0 account, register one using email/password paire or using a existing social account, eg Google Accounts to log in.</p>"},{"location":"security/auth0/#creating-a-regular-web-application","title":"Creating a Regular Web Application","text":"<p>After logged into the Auth0, let's try to create a client in Auth0.</p> <p>Expand Applications/applications in the main menu, in the Applications page, click Create Application button in right top area.</p> <p>In the popup dialog, input the application name, and select Regular Web Application, click Create button.</p> <p></p> <p>In the applications list, click the the newly created application. It will the application details.</p> <p></p> <p>In the Settings tab, you will find the clientId/clientSecrets that required to connect to Auth0 from our Jakarta EE application.</p> <p>Scroll down the page, in the Application URIs section, find the Allowed Callback URLs field, add our Jakarta EE application callback URL - http://localhost:8080/security-oidc-examples/callback.</p> <p></p>"},{"location":"security/auth0/#creating-sample-user","title":"Creating Sample User","text":"<p>From the main menu, expand User management/users. In the users list page, click Create User button in the right top area to create a new user.</p> <p></p> <p>In the Create User dialog, fill the email and password, click Create button to create a new user.</p> <p>In the users list page, click the newly created user to show the user details.</p> <p>User the email info, there is a Edit link, click it, and click Set Email verified.</p>"},{"location":"security/auth0/#running-jakarta-ee-application","title":"Running Jakarta EE application","text":"<p>Open the src/main/resources/oidc.properties, configure the Auth0 connection info.</p> <pre><code># Auth0\ndomain=dev-due1wofp.us.auth0.com\nclientId=uXNJPxVo1XgtMpZ8K97lvdEUUAFaa85u\nclientSecret=PAqXSI5jh26T7QjB7lYyD9KKKv_nNrtB35s3F1iUTYfQ1VVBoyptXIA-99lCD-GN\n</code></pre> <p>Similarly build and run the application on WildFly.</p> <p>After it is running successfully, open a browser, and navigate to localhost:8080/security-oidc-examples/protected.</p> <p>Ideally, after logged in, it should redirect the original request URL localhost:8080/security-oidc-examples/protected.</p> <p>But I always encounter an exception when redirecting to our Jakarta EE application.</p> <pre><code>15:13:34,809 ERROR [io.undertow.request] (default task-1) UT005023: Exception handling request to /security-oidc-examples/callback: java.lang.NullPointerException: Cannot invoke \"com.nimbusds.jwt.JWTClaimsSet.getClaims()\" because \"jwtClaimsSet\" is null\n        at org.glassfish.soteria@3.0.0//org.glassfish.soteria.mechanisms.openid.domain.AccessTokenImpl.&lt;init&gt;(AccessTokenImpl.java:64)\n        ...\n</code></pre> <p>Unfortunately, I can not get any helpful information from the whole exception stack, see my original question posted on stackoverflow.</p> <p>After doing some search on the Security implementation - soteria, and adding print exception stack clause in AccessTokenImpl, then replace the WildFly built-in one. I found there is a reading JWKS timeout exception. Beside this, sometime I also encountered a network connection issue when logging in, so it is possibly a network firewall issue from my side.</p> <p>After customizing the attribute <code>jwksReadTimeout</code> and <code>jwksConnectTimeout</code> of the <code>@OpenIdAuthenticationMechanismDefinition</code> annotation, eg. increasing the value from the default 500 to 5000, finally I got it works successfully.</p> <p></p>"},{"location":"security/example/","title":"Preparing Jakarta EE Security Example Project","text":"<p>Create a simple Jakarta EE project, please refer to the steps described in the JPA and Jakarta EE runtimes.</p> <p>Next let's create a CDI bean to declare OpenIdConnect authentication.</p> <pre><code>@OpenIdAuthenticationMechanismDefinition(\n        providerURI = \"${oidcConfig.issuerUri}\",\n        clientId = \"${oidcConfig.clientId}\",\n        clientSecret = \"${oidcConfig.clientSecret}\",\n        redirectURI = \"${baseURL}/callback\",\n        // redirectToOriginalResource = true,\n        jwksReadTimeout = 5000\n)\n@ApplicationScoped\n@Named(\"oidcConfig\")\npublic class OidcConfig {\n    private static final Logger LOGGER = Logger.getLogger(OidcConfig.class.getName());\n\n    private String domain;\n    private String clientId;\n    private String clientSecret;\n    private String issuerUri;\n\n    @PostConstruct\n    void init() {\n        LOGGER.config(\"OidcConfig.init()\");\n        try {\n            var properties = new Properties();\n            properties.load(getClass().getResourceAsStream(\"/oidc.properties\"));\n            domain = properties.getProperty(\"domain\");\n            clientId = properties.getProperty(\"clientId\");\n            clientSecret = properties.getProperty(\"clientSecret\");\n            issuerUri = properties.getProperty(\"issuerUri\");\n\n            if (issuerUri == null &amp;&amp; domain != null) {\n                issuerUri = \"https://\" + this.domain + \"/\";\n            }\n\n            LOGGER.log(\n                    Level.INFO,\n                    \"domain: {0}, clientId: {1}, clientSecret:{2}, issuerUri: {3}\",\n                    new Object[] {\n                            domain,\n                            clientId,\n                            clientSecret,\n                            issuerUri\n                    });\n        } catch (IOException e) {\n            LOGGER.log(Level.SEVERE, \"Failed to load oidc.properties from classpath\", e);\n        }\n    }\n\n    public String getDomain() {\n        return domain;\n    }\n\n    public String getClientId() {\n        return clientId;\n    }\n\n    public String getClientSecret() {\n        return clientSecret;\n    }\n\n    public String getIssuerUri() {\n        return issuerUri;\n    }\n}\n</code></pre> <p>In Jakarta Security 3.0,  a new annotation <code>OpenIdAuthenticationMechanismDefinition</code> is used to declare an OIDC client authentication in a Jakarta web application.</p> <ul> <li>The <code>providerURI</code> attribute is the base URL of the OIDC provider. When a user is trying to log in, it will redirect to the login page provided by the OpenIConnect provider.</li> <li>The <code>clientId</code> and <code>clientSecret</code> is the client(our Jakarta EE application) credentials used to connect an OIDC provider.</li> <li>The <code>redirectURI</code> is the redirect URL when logged in successfully. If <code>redirectToOriginalResource = false</code>, it will always redirect to the <code>redirectURI</code>, if it is <code>true</code>, the original resource will be monitored, and redirect to it after logged in.</li> </ul> <p>The <code>${baseURL}</code> is a built-in EL provided by Jakarta Security, the value is the application base URL after it is deployed into the target application servers.</p> <p>The <code>OidcConfig</code> is also used to load the configuration attributes from a <code>oidc.properties</code> file in the classpath.</p> <p>We'll create several HttpServlets to demonstrate the OpenIConnect flow.</p> <p>The <code>PublicServlet</code> is a simple servlet that unsecured by Jakarta Security.</p> <pre><code>@WebServlet(\"/public\")\npublic class PublicServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, IOException {\n        response.setContentType(\"text/html\");\n        response.getWriter().println(\"&lt;h1&gt;Public Unsecured Servlet&lt;/h1&gt;\");\n    }\n}\n</code></pre> <p>The <code>ProtectedServlet</code> is secured, and we also declare roles in this application. And <code>foo</code> is allowed to access this Servlet.</p> <pre><code>@WebServlet(\"/protected\")\n@DeclareRoles({\"foo\", \"bar\", \"kaz\"})\n@ServletSecurity(\n        @HttpConstraint(rolesAllowed = \"foo\")\n)\npublic class ProtectedServlet extends HttpServlet {\n\n    @Inject\n    private OpenIdContext context;\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        response.setContentType(\"text/html\");\n        response.getWriter().println(\"&lt;h1&gt;Protected Servlet&lt;/h1&gt;\");\n        response.getWriter().println(\"&lt;p&gt;access token:\" + context.getAccessToken() + \"&lt;/p&gt;\");\n        response.getWriter().println(\"&lt;p&gt;token type:\" + context.getTokenType() + \"&lt;/p&gt;\");\n        response.getWriter().println(\"&lt;p&gt;subject:\" + context.getSubject() + \"&lt;/p&gt;\");\n        response.getWriter().println(\"&lt;p&gt;expires in:\" + context.getExpiresIn() + \"&lt;/p&gt;\");\n        response.getWriter().println(\"&lt;p&gt;refresh token:\" + context.getRefreshToken() + \"&lt;/p&gt;\");\n        response.getWriter().println(\"&lt;p&gt;claims json:\" + context.getClaimsJson() + \"&lt;/p&gt;\");\n    }\n}\n</code></pre> <p>The <code>CallbackServlet</code> is used to redirect after logged in, here we redirect it to the <code>/protected</code> Servlet.</p> <pre><code>@WebServlet(\"/callback\")\npublic class CallbackServlet extends HttpServlet {\n    private static final Logger LOGGER = Logger.getLogger(CallbackServlet.class.getName());\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        LOGGER.log(Level.FINEST, \"Enter callback servlet\");\n\n        String referer = (String) request.getSession().getAttribute(\"Referer\");\n        String redirectTo = referer != null ? referer : request.getContextPath() + \"/protected\";\n        LOGGER.log(Level.FINEST, \"In /callback, redirect to: {0}\", redirectTo);\n\n        response.sendRedirect(redirectTo);\n    }\n\n}\n</code></pre> <p>The <code>UserNameServlet</code> is used to display the current user info from the <code>SecurityContext</code> bean.</p> <pre><code>@WebServlet(\"/username\")\n@ServletSecurity(@HttpConstraint(rolesAllowed = {\"foo\", \"bar\"}))\npublic class UserNameServlet extends HttpServlet {\n    private static final Logger LOGGER = Logger.getLogger(UserNameServlet.class.getName());\n\n    @Inject\n    SecurityContext securityContext;\n\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String nameInRequest = request.getUserPrincipal() != null ? request.getUserPrincipal().getName() : \"\";\n        var principal = securityContext.getCallerPrincipal();\n        LOGGER.log(Level.INFO, \"Principal: {0}\", principal);\n        var name = principal.getName();\n\n        response.setContentType(\"text/html\");\n        response.getWriter().println(\"&lt;h1&gt;UserName Servlet&lt;/h1&gt;\");\n        response.getWriter().println(\"&lt;p&gt;principal name in request userPrincipal:\" + nameInRequest + \"&lt;/p&gt;\");\n        response.getWriter().println(\"&lt;p&gt;principal name:\" + name + \"&lt;/p&gt;\");\n        response.getWriter().println(\"&lt;p&gt;isCallerInRole('foo'):\" + securityContext.isCallerInRole(\"foo\") + \"&lt;/p&gt;\");\n        response.getWriter().println(\"&lt;p&gt;isCallerInRole('bar'):\" + securityContext.isCallerInRole(\"bar\") + \"&lt;/p&gt;\");\n    }\n}\n</code></pre> <p>To map the authenticated user to valid groups. We create a simple IdentityStore to setup groups to the authenticated users.</p> <pre><code>@ApplicationScoped\npublic class AuthorizationIdentityStore implements IdentityStore {\n    private static final Logger LOGGER = Logger.getLogger(AuthorizationIdentityStore.class.getName());\n\n    private final Map&lt;String, Set&lt;String&gt;&gt; authorization = Map.of(\n            \"user\", Set.of(\"foo\", \"bar\"), // user in Keycloak\n            \"auth0|63249de53e292439f31c6be6\", Set.of(\"foo\", \"bar\"), // user in Auth0\n            \"user@example.com\",  Set.of(\"foo\", \"bar\"));// user in okta.\n\n    @Override\n    public Set&lt;ValidationType&gt; validationTypes() {\n        return EnumSet.of(PROVIDE_GROUPS);\n    }\n\n    @Override\n    public Set&lt;String&gt; getCallerGroups(CredentialValidationResult validationResult) {\n        var principal = validationResult.getCallerPrincipal().getName();\n        LOGGER.log(Level.INFO, \"Get principal name in validation result: {0}\", principal);\n        return authorization.get(principal) == null ? Collections.&lt;String&gt;emptySet() : authorization.get(principal);\n    }\n\n}\n</code></pre> <p>Next, we will prepare the identity providers and use them as OIDC providers in our application.</p>"},{"location":"security/kc/","title":"KeyCloak","text":"<p>KeyCloak is the most popular open source OAuth2/OpenIdConnect solutions in the Java communities. Currently it is mainly maintained by RedHat and it is also the base of RedHat SSO commercial product.</p>"},{"location":"security/kc/#bootstrapping-keycloak-instance","title":"Bootstrapping KeyCloak Instance","text":"<p>There are several guides to start a KeyCloak instance on your local system.</p> <p>Here we use Docker to run KeyCloak server, and start a KeyCloak instance via a predefined docker compose file.</p> <pre><code># file name: keycloak-mysql.yaml\nversion: '3'\n\nvolumes:\n  mysql_data:\n      driver: local\n\nservices:\n  mysql:\n      image: mysql:5.7\n      volumes:\n        - mysql_data:/var/lib/mysql\n      environment:\n        MYSQL_ROOT_PASSWORD: root\n        MYSQL_DATABASE: keycloak\n        MYSQL_USER: keycloak\n        MYSQL_PASSWORD: password\n  keycloak:\n      image: quay.io/keycloak/keycloak:latest\n      environment:\n        KC_DB: mysql\n        KC_DB_URL: jdbc:mysql://mysql:3306/keycloak\n        KC_DB_USERNAME: keycloak\n        KC_DB_PASSWORD: password\n        KEYCLOAK_ADMIN : admin\n        KEYCLOAK_ADMIN_PASSWORD: Pa55w0rd\n        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the MySQL JDBC driver documentation in order to use it.\n        #JDBC_PARAMS: \"connectTimeout=30000\"\n      ports:\n        - 9090:8080\n      depends_on:\n        - mysql\n      entrypoint: [\"/opt/keycloak/bin/kc.sh\", \"start-dev\"]\n\n</code></pre> <p>Open a terminal, execute the following command to start KeyCloak.</p> <pre><code>docker compose -f ./keycloak-mysql.yaml up\n</code></pre>"},{"location":"security/kc/#registering-client-in-keycloak","title":"Registering Client in KeyCloak","text":"<p>After it is started successfully, open your browser and navigate to http://localhost:9090, you will see the following KeyCloak welcome page.</p> <p></p> <p>Click the Administration Console link, try to login with credentials admin/Pa55w0rd.</p> <p></p> <p>After logged in, you will see the following screen.</p> <p></p> <p>Click the main menu, select Clients, in the clients page, click the Create Client button.</p> <p></p> <p>In the Create Client page, fill the client info like the following screen.</p> <p></p> <p>Click Next button, in the Capability Config page, make sure Client authentication is checked.</p> <p></p> <p>When it is done, it redirect to the client details page. Scroll down to the Access settings section, set Valid redirect URIs and Valid post logout redirect URIs.</p> <p></p> <p>Click the Credentials tab, there is Client Secrets which will be used to connect to this authentication server from our Jakarta EE application.</p> <p></p>"},{"location":"security/kc/#creating-sample-user","title":"Creating Sample User","text":"<p>Next let's create a sample user used to login our Jakarta EE application.</p> <p>Click and expand the main menu, and select Users, click Create User to create a new user.</p> <p></p>"},{"location":"security/kc/#running-jakarta-ee-example","title":"Running Jakarta EE Example","text":"<p>Next, we will add configuration to our Jakarta EE project and make sure it will connect to the KeyCloak server using the clientId/clientSecret we have created in the last step.</p> <p>Open src/main/resources/oidc.properties.</p> <pre><code># local Keycloak\nissuerUri=http://localhost:9090/realms/master/\nclientId=demo\nclientSecret=SvbJ3kdE21kfy7KH1qihyg3XnIHdUecr\n</code></pre> <p>Then execute the following command and run our Jakarta EE application on a WildFly server.</p> <p>Due to a SSL connection issue in GlassFish, here we will use WildFly to simplify the work. If you are stick on GlassFish, please follow the comments of the issue to overcome the barrier in GlassFish.</p> <pre><code>mvn clean wildfly:run -Pwildfly\n</code></pre> <p>Open a browser, navigate to localhost:8080/security-oidc-examples/protected.</p> <p>It will redirect to the KeyCloak login page.</p> <p></p> <p>Login with the new sample user you have created in the KeyCloak administration console.</p> <p>After logged in successfully, it will redirect to the original request URL localhost:8080/security-oidc-examples/protected.</p> <p></p> <p>Navigate to http://localhost:8080/security-oidc-examples/username, it will show user info similar to the following screen.</p> <p></p>"},{"location":"security/new/","title":"What's New in Jakarta Security 3","text":"<p>In additional to the existing BASIC, FORM, and CUSTOM FORM authentication, Jakarta Security 3.0 adds OpenID Connect protocol support. But the original plan of support Client Cert and Digest is not available in this release, more details please read Arjan Tijms's What's New In Jakarta Security 3.</p> <p>OpenID Connect(aka OIDC) 1.0 is a simple identity layer on top of the OAuth 2.0 protocol. It enables Clients to verify the identity of the End-User based on the authentication performed by an Authorization Server, as well as to obtain basic profile information about the End-User in an interoperable and REST-like manner.</p> <p>Next we will explore how to configure OIDC client authentication in a Jakarta web application with the popular OIDC/OAuth2 authentication providers, such as self-host KeyCloak server, and cloud based identity providers, eg. Okta and Auth0.</p>"},{"location":"security/okta/","title":"Okta","text":"<p>Okta is another famous cloud IDP provider, it is also the owner of Auth0.com.</p> <p>If you do not have a Okta account, try to create one now or use social account, eg. Google Accounts to log in.</p>"},{"location":"security/okta/#creating-web-application-in-okta-dashboard","title":"Creating Web Application in Okta Dashboard","text":"<p>After logged in Okta Dashboard, in the main menu, expand Dashboard/Getting Started, in the Getting Started with Okta page, find Create a Web Application in the Embed Auth into Your app block, create the Add Web App button.</p> <p></p> <p>In the Browse App Integration Catalog page, click the Create Web App button in the right top area directly.</p> <p></p> <p>In the Create a new app integration dialog, choose the options as following:</p> <ul> <li>Sign-in method - OIDC</li> <li>Application Type - Web Application</li> </ul> <p></p> <p>Click the Next button.</p> <p>In the New Web App Integration page, fill the following fields.</p> <ul> <li>App integration name - Jakarta EE OIDC demo</li> <li>Sign-in redirect URIs - http://localhost:8080/security-oidc-examples/callback</li> <li>Sign-out redirect URIs - http://localhost:8080/security-oidc-examples/public</li> <li>Assignments/Controlled access - Skip group assignment for now</li> </ul> <p></p> <p>Then click Save button to save the application registration.</p> <p>In the application details page, you get clientId/clientSecret there.</p> <p></p>"},{"location":"security/okta/#creating-sample-user-account","title":"Creating Sample User Account","text":"<p>In the main menu, expand Directory/People.</p> <p>In the People page, click Add person button to create a new user.</p> <p>In the Add Person dialog, fill a sample user account information.</p> <p></p> <p>And click Save to save it.</p> <p>Then in this newly created user details page, there is an Assign Applications button.</p> <p>In the popup dialog, select the application we just created in the last step.</p> <p>Click the Reset Password button, in the popup dialog, select create a Temporary password.</p>"},{"location":"security/okta/#running-jakarta-ee-example-application","title":"Running Jakarta EE Example Application","text":"<p>Similarly, change content of the oidc.properties file to the following.</p> <pre><code># Okta\ndomain=dev-64915845.okta.com\nclientId=0oa6jm8qlhl4e4mDN5d7\nclientSecret=Zz5EODO8MdtNlGGYSFLuoSGQQNJgZW6mUxPtZRzW\n</code></pre> <p>Build the project and deploy into WildFly.</p> <p>After it is deployed successfully, open a browser and navigate to localhost:8080/security-oidc-examples/protected.</p> <p></p> <p>Use the user we just created in Okta Dashboard to log in. It will require you set up a new password if it is the first time login.</p> <p>After it logged in, it will redirect to localhost:8080/security-oidc-examples/protected.</p> <p></p>"},{"location":"security/summary/","title":"Summary","text":"<p>The new OIDC client support is a great addon to the existing security spec, unfortunately the original plans of Digest and Client-Cert authentications are not available in this release.</p> <p>For my opinion, <code>OpenIdAuthenticationMechanismDefinition</code> is not a good naming, I would like use <code>OidcClient</code> or <code>OpenIdConnectClient</code> instead of the word <code>OpenId</code>, because <code>OpenId</code> itself is really a deprecated protocol by Google. But the newer <code>OpenIdConnect</code> related facilities are just addons on the top of existing OAuth2 protocol.</p> <p>Additionally, I am eager there is a fluent API provided to assemble security configuration(authentication and authorization) through producing standard CDI beans instead of the annotations, like the Spring Security configuration. Especially, when RESTful API is becoming more and more popular, path pattern based security constraints is easier than the annotations applied on classes or methods.</p>"}]}